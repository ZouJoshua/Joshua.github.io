<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心安即行 自在欢喜</title>
  <subtitle>一生所求  爱与自由  你与温柔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://joshuazou.cn/"/>
  <updated>2017-08-28T09:50:58.409Z</updated>
  <id>http://joshuazou.cn/</id>
  
  <author>
    <name>Joshua Zou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows下配置TensorFlow</title>
    <link href="http://joshuazou.cn/2017/08/25/Windows%E4%B8%8B%E9%85%8D%E7%BD%AETensorFlow/"/>
    <id>http://joshuazou.cn/2017/08/25/Windows下配置TensorFlow/</id>
    <published>2017-08-25T07:16:03.000Z</published>
    <updated>2017-08-28T09:50:58.409Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong></p>
</blockquote>
<h1 id="个人电脑配置及环境"><a href="#个人电脑配置及环境" class="headerlink" title="个人电脑配置及环境"></a>个人电脑配置及环境</h1><p>由于tensorflow配置需要CUDA 和CUDNN 版本匹配才能正常运行，而NVIDIA 更新这两个产品不同步，所以对于不同的CUDA版本，所需的cuDNN是固定的，因此时间不同，安装的版本是不一样的，而本博文更新日期为：<strong>2017/8/28</strong>，各位查看配置信息时，需注意此点。 </p>
<h2 id="笔记本配置"><a href="#笔记本配置" class="headerlink" title="笔记本配置"></a>笔记本配置</h2><p><strong>OS</strong> ： Windows 10 64bit</p>
<p><strong>CPU</strong> ： Intel Core i7-7500U(2.7GHz/L3 4M) </p>
<p><strong>内存</strong> ： 8G</p>
<p><strong>显卡</strong> ： NVIDIA GeForce 940MX</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p><strong>Python</strong> ： Python 3.5.2 |Continuum Analytics, Inc.| (default, Jul  5 2016, 11:41:13) [MSC v.1900 64 bit (AMD64)] on win32</p>
<p><strong>TensorFlow</strong> ： 1.3.0</p>
<p><strong>CUDA</strong> ： Cuda compilation tools, release 8.0, V8.0.60</p>
<p><strong>cuDNN</strong> ： cuDNN v6.0 (April 27, 2017), for CUDA 8.0</p>
<h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建tensorflow虚拟环境，自定义路径，（TensorFlow在Windows上只支持64位Python3.5）</span></div><div class="line">conda create -n tensorflow python=3.5.2</div></pre></td></tr></table></figure>
<h1 id="TensorFlow-安装"><a href="#TensorFlow-安装" class="headerlink" title="TensorFlow 安装"></a>TensorFlow 安装</h1><p>确定安装那个版本的TensorFlow：</p>
<ul>
<li><p>仅支持CPU运算版本：</p>
<p>  如果电脑的系统没有NVIDIA显卡，不支持GPU，那么必须安装这个版本。</p>
</li>
<li><p>支持GPU运算版本：</p>
<p>  TensorFlow程序在GPU下运行比在CPU下运行明显快很多，但是需要 CUDA 和 cuDNN 的支持，性能还可以建议安装此版本，在 <a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="external">这里</a> 确认你的显卡支持 CUDA。</p>
</li>
</ul>
<p>虽然我的NVIDIA显卡并不特别出色，计算能力5.0，从计算效率上考虑还是打算安装GPU运算版本。如果查看自己的电脑支持GPU，那么可以开始下载 CUDA 和 cuDNN 的安装包了，注意版本号分别是 CUDA 8.0 和 cuDNN 6.0（由于 TensorFlow 不同版本有变化，5.1 已不再适用新版本）。</p>
<h2 id="安装-CUDA-和-CUDNN-驱动"><a href="#安装-CUDA-和-CUDNN-驱动" class="headerlink" title="安装 CUDA 和 CUDNN 驱动"></a>安装 CUDA 和 CUDNN 驱动</h2><ol>
<li><p>CUDA <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="external">安装</a></p>
<p> 下载完成可以进行安装，exe 文件就是 CUDA8 的安装程序，直接双击执行（尽量关闭360，如果不想关闭，弹出修改程序的内容的话就点允许，否则安装会出问题），安装完之后系统变量会自动添加上。<br> 测试是否安装成功，打开CMD窗口，命令行输入 <code>nvcc -V</code> 。</p>
<p> <img src="http://i.imgur.com/9y3fO0R.png" alt=""></p>
</li>
<li><p>CUDNN <a href="https://developer.nvidia.com/cudnn" target="_blank" rel="external">安装</a></p>
<p> Google 于 2017 年 8 月 17 日左右发布了 TensorFlow 1.3，该版本不再支持 cuDNN 5，开始支持 cuDNN 6，并预计在 TensorFlow 1.4 支持 cuDNN 7，所以说当你使用 pip 安装最新版的时候，请使用 cuDNN 6，否则会出现 <code>ImportError: DLL load failed: 找不到指定的模块。</code> 和 <code>ImportError: No module named &#39;_pywrap_tensorflow_internal&#39;</code> 的问题。</p>
<p> 当下载完成后，解压后将文件复制进入<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0</code>，并将该目录下的这三个目录加进 Path 环境变量</p>
</li>
</ol>
<h2 id="安装-TensorFlow"><a href="#安装-TensorFlow" class="headerlink" title="安装 TensorFlow"></a>安装 TensorFlow</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 进入tensorflow环境，并激活环境</span></div><div class="line"><span class="built_in">cd</span> tensorflow/scripts </div><div class="line">activate</div><div class="line"><span class="comment"># 安装 tensorflow（GPU版本）</span></div><div class="line">pip install tensorflow-gpu</div></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line"></div><div class="line">a = tf.random_normal((100, 100))</div><div class="line">b = tf.random_normal((100, 500))</div><div class="line">c = tf.matmul(a, b)</div><div class="line">sess = tf.InteractiveSession()</div><div class="line">sess.run(c)</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/Ylfc0ui.png" alt=""></p>
<p>至此，安装就完成了，接下来就可以着手项目练练手了（PS：暴露了我的渣显卡，请勿吐槽。）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;个人电脑配置及环境&quot;&gt;&lt;a href=&quot;#个人电脑配置及环境&quot; class=&quot;headerlink&quot; title=&quot;个人电脑配置及环境&quot;&gt;&lt;/a&gt;个人电脑配
    
    </summary>
    
      <category term="TensorFlow" scheme="http://joshuazou.cn/categories/TensorFlow/"/>
    
    
      <category term="深度学习" scheme="http://joshuazou.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习" scheme="http://joshuazou.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据挖掘" scheme="http://joshuazou.cn/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>关于Numpy速度的一些思考</title>
    <link href="http://joshuazou.cn/2017/08/22/%E5%85%B3%E4%BA%8ENumpy%E9%80%9F%E5%BA%A6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://joshuazou.cn/2017/08/22/关于Numpy速度的一些思考/</id>
    <published>2017-08-22T02:06:11.340Z</published>
    <updated>2017-08-22T04:07:12.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong></p>
<p>对于 Python 语言，听到吐槽最多的就是速度了，因为 Python 执行代码的时候会执行很多的 ‘check’ 功能，比如：<code>b=1；a=b/0.5</code> ，这个看似简单的运算，在计算机内部，b 首先要从一个整数 integer 转化成浮点数 float ，才能执行下一步。而做数据挖掘，机器学习或数据分析，用到最多的就是 Python 的科学计算库了，Numpy 就是其中常用的一个，它能把 Python 和高性能的 C 语言合并在一起，在我们调用 Numpy 的时候，其实调用了很多 C 语言，而不是纯 Python，而本文将对 Numpy 最近的思考做个小结。</p>
</blockquote>
<p>#Numpy Array的数据结构</p>
<p>其实 Numpy 就是 C 的逻辑，创建存储容器 ‘Array’ 的时候是寻找内存上的一连串区域来存放，而Python存放的时候不是连续的区域，这使得Python在索引这个容器里的数据不是那么有效率。下图是来自 <a href="https://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/" target="_blank" rel="external">Why Python is Slow: Looking Under the Hood</a>， 数据存储结构很好的证明了效率问题。</p>
<p><img src="http://i.imgur.com/WKqJ8Jn.png" alt=""></p>
<p>运用 Numpy 的时候，我们通常不是用一个一维 Array 来存放数据，而是用二维或者三维的块来存放。因为 Numpy 快速的矩阵相乘运算，能将乘法运算分配到计算机中的多个核，让运算并行，而并行运算大大加速了运算速度，这也是 Numpy 为什么受人喜欢的一个原因。其实不管是1D/2D/3D 的 Array，从根本上，它都是一个 1D array!</p>
<p><img src="http://i.imgur.com/fBN6Svf.png" alt=""></p>
<p>我们常用的 2D Array，在计算机内存里是存储在一个连续空间上的，而对于这个连续空间，我们如果创建 Array 的方式不同，在这个连续空间上的排列顺序也有不同。在 Numpy 中，创建 2D Array 的默认方式是 “C-type” 以 row 为主在内存中排列，而如果是 “Fortran” 的方式创建的，就是以 column 为主在内存中排列。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">col_array = np.zeros((5,5), order=<span class="string">'C'</span>)    <span class="comment"># C-type</span></div><div class="line">row_array = np.zeros((5,5), order=<span class="string">'F'</span>)    <span class="comment"># Fortran</span></div></pre></td></tr></table></figure>
<p>#合并操作</p>
<p>当计算中涉及合并矩阵，不同形式的矩阵创建方式会影响时间。因为在 Numpy 中的矩阵合并等，都是发生在一维空间里，不是我们想象的二维空间中!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">a = np.zeros((200, 200), order=<span class="string">'C'</span>)</div><div class="line">b = np.zeros((200, 200), order=<span class="string">'F'</span>)</div><div class="line">N = 9999</div><div class="line"></div><div class="line">def f1(a):</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</div><div class="line">        np.concatenate((a, a), axis=0)</div><div class="line"></div><div class="line">def f2(b):</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</div><div class="line">        np.concatenate((b, b), axis=0)</div><div class="line"></div><div class="line">t0 = time.time()</div><div class="line">f1(a)</div><div class="line">t1 = time.time()</div><div class="line">f2(b)</div><div class="line">t2 = time.time()</div><div class="line"></div><div class="line"><span class="built_in">print</span>((t1-t0)/N)     <span class="comment"># 2.8277459246168757e-05</span></div><div class="line"><span class="built_in">print</span>((t2-t1)/N)     <span class="comment"># 2.8879836340262445e-05</span></div></pre></td></tr></table></figure>
<p>从时间上看，相差不是很明显，这与计算机的配置有关，本人计算机配置为：</p>
<p><img src="http://i.imgur.com/WwunczA.png" alt=""></p>
<p>在另一台比较旧的电脑上测试同样的数据，所需时间为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>((t1-t0)/N)     <span class="comment"># 2.1623800439660055e-03</span></div><div class="line"><span class="built_in">print</span>((t2-t1)/N)     <span class="comment"># 3.7443810003330046e-03</span></div></pre></td></tr></table></figure>
<p>旧电脑配置为：</p>
<p><img src="http://i.imgur.com/7dd4z05.png" alt=""></p>
<p>可见时间效率上相差还是比较明显的。row 为主的存储方式，如果在 row 的方向上合并矩阵，将会更快。根据 C 语言的存储结构，完成合并操作，在 1D array 中，直接再加一个 row 放在 1D array， 所以在上面的测试中， f1 速度要更快。 但是在以 column 为主的系统中，往 1D array 后面加 row 的规则变复杂了，消耗的时间也变长。如果以 axis=1 的方式合并，”F” 方式的 f2 将会比 “C” 方式的 f1 更好。</p>
<p>有时候犯懒会直接使用 <code>np.stack</code> 来代替 <code>np.concatenate</code>， 因为这样可以少写一点代码，不过使用上面的形式，通过上面的测试发现为了速度，推荐还是尽量使用 <code>np.concatenate</code>，所以在做操作前看自己要在哪个 axis 上的操作多，然后再创建合适于自己的矩阵形式 (“C-type”/“Fortran”)。</p>
<p>#copy慢 view快</p>
<p>在 Numpy 中，<code>copy</code> 和 <code>view. copy</code> 顾名思义，会将数据 <code>copy</code> 出来存放在内存中另一个地方，而 <code>view</code> 则是不 <code>copy</code> 数据，直接取源数据的索引部分。下图来自 <a href="https://www.dataquest.io/blog/settingwithcopywarning/" target="_blank" rel="external">Understanding SettingwithCopyWarning in pandas</a>。</p>
<p><img src="http://i.imgur.com/ITsbq7r.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = np.arange(1, 7).reshape((3,2))</div><div class="line">a_view = a[:2]</div><div class="line">a_copy = a[:2].copy()</div><div class="line"></div><div class="line">a_copy[1,1] = 0</div><div class="line"><span class="built_in">print</span>(a)</div><div class="line"></div><div class="line">a_view[1,1] = 0</div><div class="line"><span class="built_in">print</span>(a)</div></pre></td></tr></table></figure>
<p>a_view 的东西全部都是 a 的东西，动 a_view 的任何地方，a 都会被动到，因为他们在内存中的位置是一模一样的，本质上就是自己，而 a_copy 则是将 a copy 了一份，然后把 a_copy 放在内存中的另外的地方，这样改变 a_copy，a 是不会被改变的。</p>
<p>#矩阵展平</p>
<p>有时候要把一个矩阵展平, 用到 <code>np.flatten()</code> 或者 <code>np.ravel()</code>， ravel 返回的是一个 view （如果用 ravel，需要 copy 的时候才会被 copy ，我想这个时候可能是把 ravel 里面 order 转换的时候，如 ‘C-type’ -&gt; ‘Fortran’）， 而 flatten 返回的总是一个 copy，所以相比于 flatten， ravel 速度更快。</p>
<p>#选择数据</p>
<p>选择数据的时候，常会用到 view 或者 copy 的形式，如果能用到 view 的，尽量用 view，避免 copy 数据。</p>
<h2 id="使用-np-take-替代用-index-选数据的方法"><a href="#使用-np-take-替代用-index-选数据的方法" class="headerlink" title="使用 np.take(), 替代用 index 选数据的方法"></a>使用 <code>np.take()</code>, 替代用 index 选数据的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">a = np.random.rand(1000000, 10)</div><div class="line">N = 99</div><div class="line">indices = np.random.randint(0, 1000000, size=10000)</div><div class="line"></div><div class="line">def f1(a):</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</div><div class="line">        _ = np.take(a, indices, axis=0)</div><div class="line"></div><div class="line">def f2(b):</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</div><div class="line">        _ = b[indices]</div></pre></td></tr></table></figure>
<h2 id="使用-np-compress-替代用-mask-选数据的方法"><a href="#使用-np-compress-替代用-mask-选数据的方法" class="headerlink" title="使用 np.compress(), 替代用 mask 选数据的方法"></a>使用 <code>np.compress()</code>, 替代用 mask 选数据的方法</h2><p><code>a_copy2 = a[[True, True], [False, True]]</code> 这种就是用 TRUE， FALSE 来选择数据的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mask = a[:, 0] &lt; 0.5</div><div class="line">def f1(a):</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</div><div class="line">        _ = np.compress(mask, a, axis=0)</div><div class="line"></div><div class="line">def f2(b):</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</div><div class="line">        _ = b[mask]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于 Python 语言，听到吐槽最多的就是速度了，因为 Python 执行代码的时候会执行很多的 ‘check’ 功能，比如：&lt;code&gt;b=1；a=b/0.5&lt;/code&gt; ，这个看似简单的
    
    </summary>
    
      <category term="Python库" scheme="http://joshuazou.cn/categories/Python%E5%BA%93/"/>
    
    
      <category term="Python" scheme="http://joshuazou.cn/tags/Python/"/>
    
      <category term="Numpy" scheme="http://joshuazou.cn/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>AWS-EC2云服务器搭建VPN/SS服务</title>
    <link href="http://joshuazou.cn/2017/08/15/AWS-EC2%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAVPN%E4%B8%8ESS%E6%9C%8D%E5%8A%A1/"/>
    <id>http://joshuazou.cn/2017/08/15/AWS-EC2云服务器搭建VPN与SS服务/</id>
    <published>2017-08-15T04:20:00.000Z</published>
    <updated>2017-08-17T06:05:57.737Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong></p>
<p>前段时间自己用的GreenVPN服务突然被告知被封了，无法提供翻墙服务了，日常查找一些资料需要FQ。之后我也尝试了很多方法，从最开始朋友给的vpn账号，到现在折腾亚马逊一年免费的ec2套餐自己搭建vpn/ss服务（没办法，生命不息，折腾不止），一来基本免费，二来可以自己动手搭建vpn/ss服务用起来相对更安全些。</p>
</blockquote>
<a id="more"></a>
<p>开通<code>amazon aws/ec2</code>的教程网上很多，我这里就不详细写了，大家自行 google 吧，有几点需要注意的简单提一下：</p>
<ol>
<li>去 <code>https://aws.amazon.com/</code> 注册账号，你amazon.cn的账号并不能用；</li>
<li>需要有一张可用的信用卡，开通的过程中会需要扣你1美刀的预付款作为验证信用卡可用性，验证过程是电话验证，所以还要保持你的手机可用；</li>
<li>进入控制台之后，可能会纠结在哪个区申请ec2实例，可以去<a href="http://www.cloudping.info/" target="_blank" rel="external">http://www.cloudping.info/</a> 测试你到哪个机房延迟比较低，一般来说东京延迟最低；</li>
<li>创建ec2的过程基本都是一路下一步，注意看清楚’free’标识就行；</li>
<li>保存好生成的密钥（PEM）文件，以后ssh要用到。</li>
</ol>
<p>当你的一年免费ec2实例就申请好后，可以进行搭建vpn的操作了。</p>
<p><strong>需注意</strong>:一年快到期前一定要取消这个服务，否则下一年就要收费了，并且亚马逊的服务还是很贵的，如果还想继续吃免费午餐的话重新注册一个新账号。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p><strong>服务器</strong>：AWS-EC2 Ubuntu 16.04.2 LTS</p>
<p><strong>本地</strong>：win10/64位 </p>
<h1 id="登录到ec2实例"><a href="#登录到ec2实例" class="headerlink" title="登录到ec2实例"></a>登录到ec2实例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -i <span class="string">"/path/to/your/pem/file"</span> ubuntu@your.ec2.instance.at.compute.amazonaws.com</div></pre></td></tr></table></figure>
<p>我在本地采用xmanager工具的xshell的图形化界面，使用SSH协议建立连接后可以打开图像操作界面，远程登陆Ubuntu的终端。</p>
<h1 id="搭建VPN服务"><a href="#搭建VPN服务" class="headerlink" title="搭建VPN服务"></a>搭建VPN服务</h1><p>VPN具有先天跨平台的优势，各类操作系统都有自己的VPN功能，直接可以用，无需第三方客户端。</p>
<p>但是VPN不够灵活，默认情况下，系统所有的流量都会从VPN走（很多VPN服务都可以设置全局变量或局部变量，即当设置成局部变量时，需要FQ时就会选用VPN服务，访问国内网站时就用本地网络，若是设置成全局变量，所有的流量都要从VPN走，这样有时候速度大打折扣），很多时候都是不必要的，比如你上个 youku，数据是从 youku 到东京机房，再从东京机房回到你的电脑，绕一大圈，不仅速度慢还浪费VPN流量。当然可以手动修改路由表，决定哪些流量走VPN哪些直连，但是这个工作量太大了。</p>
<p>不过VPN够全能，ssh/ss做不了的VPN全都没问题，比如你安装了twitter的客户端，ssh/ss就没办法帮你翻了，但是VPN没问题，所以，VPN服务还是选择安装了。</p>
<p>VPN包含PPTP,L2TP,OpenVPN,IPSec四种模式，这里选择安全性和实用性都还可以的PPTP模式。</p>
<h2 id="安装-pptp-和防火墙"><a href="#安装-pptp-和防火墙" class="headerlink" title="安装 pptp 和防火墙"></a>安装 pptp 和防火墙</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install pptpd ufw</div></pre></td></tr></table></figure>
<h2 id="修改pptpd-conf默认配置"><a href="#修改pptpd-conf默认配置" class="headerlink" title="修改pptpd.conf默认配置"></a>修改<code>pptpd.conf</code>默认配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/pptpd.conf</div><div class="line"><span class="comment">#在最后添加，去掉注释</span></div><div class="line">localip 192.168.0.1 <span class="comment">#主机ip</span></div><div class="line">remoteip 192.168.0.234-238,192.168.0.245 <span class="comment">#分配的ip段</span></div></pre></td></tr></table></figure>
<h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 允许SSH</span></div><div class="line">sudo ufw allow 22</div><div class="line"><span class="comment"># 允许HTTP</span></div><div class="line">sudo ufw allow 80</div><div class="line"><span class="comment"># 允许VPN</span></div><div class="line">sudo ufw allow 1723</div><div class="line"><span class="comment"># 启用UFW</span></div><div class="line">sudo ufw <span class="built_in">enable</span></div></pre></td></tr></table></figure>
<p>注意，需要允许SSH端口，不然无法用SSH登录服务器。</p>
<h2 id="设置-VPN-DNS"><a href="#设置-VPN-DNS" class="headerlink" title="设置 VPN DNS"></a>设置 <code>VPN DNS</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/ppp/pptpd-options</div><div class="line"><span class="comment">#添加，使用google dns</span></div><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></td></tr></table></figure>
<h2 id="添加VPN账号"><a href="#添加VPN账号" class="headerlink" title="添加VPN账号"></a>添加VPN账号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/ppp/chap-secrets</div><div class="line"></div><div class="line"><span class="comment"># Secrets for authentication using CHAP</span></div><div class="line"><span class="comment"># client        server  secret                  IP addresses</span></div><div class="line"><span class="comment"># 添加一行，依次为：用户名，服务，密码，限制ip：</span></div><div class="line">zou         pptpd   yourpassword            *</div></pre></td></tr></table></figure>
<h2 id="设置ip转发"><a href="#设置ip转发" class="headerlink" title="设置ip转发"></a>设置ip转发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/sysctl.conf</div><div class="line"><span class="comment"># 打开注释</span></div><div class="line">net.ipv4.ip_forward=1</div><div class="line"><span class="comment"># 使它立刻生效</span></div><div class="line">sudo sysctl -p</div></pre></td></tr></table></figure>
<h2 id="添加-iptables-规则"><a href="#添加-iptables-规则" class="headerlink" title="添加 iptables 规则"></a>添加 iptables 规则</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装iptables</span></div><div class="line">sudo apt-get install iptables</div><div class="line"><span class="comment"># 建立一个 NAT，开启iptables转发（其中eth0是联网网卡，192.168.0.1/24是准备使用的网段与第2步的主机ip）</span></div><div class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE</div><div class="line"></div><div class="line"><span class="comment"># 将规则保存，使重启后规则不丢失</span></div><div class="line">sudo iptables-save &gt; /etc/iptables-rules</div></pre></td></tr></table></figure>
<p>若此处提示：<code>-bash: /etc/iptables-rules: Permission denied</code> 则可使用root用户，命令：</p>
<p>su - 进入root用户保存</p>
<h2 id="编辑网卡文件，加载网卡时自动加载规则"><a href="#编辑网卡文件，加载网卡时自动加载规则" class="headerlink" title="编辑网卡文件，加载网卡时自动加载规则"></a>编辑网卡文件，加载网卡时自动加载规则</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo vim  /etc/network/interfaces</div><div class="line"><span class="comment"># 末尾加入</span></div><div class="line">pre-up iptables-restore &lt;/etc/iptables-rules</div><div class="line"><span class="comment"># 设置MTU，防止包过大</span></div><div class="line">sudo iptables -A FORWARD -s 192.168.0.0/24 -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --<span class="built_in">set</span>-mss 1200</div><div class="line"><span class="comment"># 若设置了上条规则，记得保存</span></div><div class="line">sudo iptables-save &gt;/etc/iptables-rules</div></pre></td></tr></table></figure>
<h2 id="修改防火墙UFW配置文件"><a href="#修改防火墙UFW配置文件" class="headerlink" title="修改防火墙UFW配置文件"></a>修改防火墙UFW配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /etc/default/ufw</div><div class="line"><span class="comment">#将“DEFAULT_FORWARD_POLICY” 的值改为 “ACCEPT”</span></div></pre></td></tr></table></figure>
<p>macos 能连上，但没有任何收发包的问题，即能连接上VPN，不能上网：vpn高级里勾选发送全部流量</p>
<h1 id="搭建SS服务"><a href="#搭建SS服务" class="headerlink" title="搭建SS服务"></a>搭建SS服务</h1><p>在国内搜索技术文章，如果使用baidu的话，你懂的。因此就转向google，但是由于众所周知的原因，我们无法访问google，同样可以用AWS-EC2服务器搭建ShadowSocks服务器，然后就可以愉快的FQ进行科学上网。</p>
<p>ShadowSocks有如下特点：</p>
<blockquote>
<p>快速（异步I/O和事件驱动程序）<br>安全（所有的流量都经过加密算法加密，支持自定义算法）<br>支持移动客户端（专为移动设备和无线网络优化）<br>跨平台（可运行于包括PC，Mac，手机（Android和iOS）和路由器（OpenWrt）在内的多种平台上）<br>开源、易于维护</p>
</blockquote>
<h2 id="安装ShadowSocks"><a href="#安装ShadowSocks" class="headerlink" title="安装ShadowSocks"></a>安装ShadowSocks</h2><p>AWS服务器我选择的是Ubuntu系统。</p>
<p><img src="http://i.imgur.com/sqcqvty.png" alt=""></p>
<p>前面的过程省略，我是直接使用xshell工具连上云服务器进行操作的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先装pip</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install python-pip</div><div class="line"><span class="comment"># 安装shadowsocks</span></div><div class="line">sudo pip install shadowsocks</div><div class="line">sudo apt-get -y install python-m2crypto</div></pre></td></tr></table></figure>
<h2 id="配置ShadowSocks"><a href="#配置ShadowSocks" class="headerlink" title="配置ShadowSocks"></a>配置ShadowSocks</h2><p>安装完毕后，可以查看使用ssserver命令进行查看。如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssserver -h</div></pre></td></tr></table></figure>
<p>添加配置并编辑</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/shadowsocks.json</div><div class="line"><span class="comment">#加入如下配置</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</div><div class="line">    <span class="string">"server_port"</span>:8388, <span class="comment">#任意端口</span></div><div class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="string">"local_port"</span>:1080,</div><div class="line">    <span class="string">"password"</span>:<span class="string">"你的密码"</span>,</div><div class="line">    <span class="string">"timeout"</span>:1000,</div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="string">"fast_open"</span>:<span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输入完成后保存退出，然后启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks.json start</div></pre></td></tr></table></figure>
<h2 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h2><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">windows版本下载</a>，下载完毕后，双击Shadowsocks.exe。</p>
<p>在弹出的窗口中，填入Shadowsocks服务器的IP、Shadowsocks服务器端口已经密码，就可以连接Shadowsocks服务器，如下：</p>
<p><img src="http://i.imgur.com/HlNaVAp.png" alt=""></p>
<p>正确连接Shadowsocks服务器后，我们就可以进行科学上网了。</p>
<p><img src="http://i.imgur.com/bytd8vA.png" alt=""></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol>
<li>使用SS服务的时候，先要SSH连接EC2服务器，启动服务，然后，再打开客户端</li>
<li>暂停SS服务的时候，用命令 <code>ssserver -c /etc/shadowsocks.json stop</code> ，如果启动服务的时候显示<code>socket.error: [Errno 98] Address already in use</code>，则表示未正确关闭服务，端口仍被占用，此时用</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看端口被占用的进程</span></div><div class="line">netstat -tunlp</div><div class="line"><span class="comment">#关闭被占用进程</span></div><div class="line"><span class="built_in">kill</span> 进程号</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前段时间自己用的GreenVPN服务突然被告知被封了，无法提供翻墙服务了，日常查找一些资料需要FQ。之后我也尝试了很多方法，从最开始朋友给的vpn账号，到现在折腾亚马逊一年免费的ec2套餐自己搭建vpn/ss服务（没办法，生命不息，折腾不止），一来基本免费，二来可以自己动手搭建vpn/ss服务用起来相对更安全些。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="VPN/SS服务搭建" scheme="http://joshuazou.cn/categories/VPN-SS%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="AWS-EC2" scheme="http://joshuazou.cn/tags/AWS-EC2/"/>
    
      <category term="VPN" scheme="http://joshuazou.cn/tags/VPN/"/>
    
      <category term="SS" scheme="http://joshuazou.cn/tags/SS/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取需执行js的网页数据</title>
    <link href="http://joshuazou.cn/2017/08/01/Python%E7%88%AC%E5%8F%96js%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <id>http://joshuazou.cn/2017/08/01/Python爬取js加载的数据/</id>
    <published>2017-08-01T02:00:00.000Z</published>
    <updated>2017-08-09T14:34:21.756Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong></p>
<p>一般情况下，对静态网页我一般采用”requests + BeautifulSoup + re”这三个库，可以解决大部分爬虫问题，如果工程量较大，一般会采用Scrapy框架处理爬虫，但有些网页是在加载时动态创建HTML内容，只有在js代码完全执行完后才会显示最终结果。如果用传统的方法抓取页面，就只能获得js代码执行之前页面上的内容，一般要解决这个问题有两种方法：</p>
<p>1.直接分析接口，从js代码中抓取数据（执行js代码，解析js变量，不需要解析html）。</p>
<p>2.用第三方库运行js，抓取运行后的最终html页面。</p>
<p>所以对于通过Ajax、JavaScript等动态加载的网页，就需要通过”Phantomjs + CasperJS + Selenium”来实现了。本文解决的是在工作中遇到的一个小问题，即遇到需要执行页面上JavaScript才能爬取数据的网页，在分析问题后发现可以用两种方法解决该问题，一种是用提交表单数据的post方法来获取所需数据，另一种用 Selenium 和 Phantomjs处理js加载的动态数据。</p>
</blockquote>
<a id="more"></a>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>抓取大连商品交易所期货行情的一个月的日行情数据，<a href="http://218.25.154.81/portal/cate?cid=1261730308135" target="_blank" rel="external">大连商品交易所</a>。</p>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>对于该问题，在分析后我采用两种方法来解决。</p>
<ol>
<li><p>常规方法，Requests + BeautifulSoup</p>
</li>
<li><p>用Selenium 和 Phantomjs处理需加载js的动态数据</p>
</li>
</ol>
<h2 id="Requests-BeautifulSoup"><a href="#Requests-BeautifulSoup" class="headerlink" title="Requests + BeautifulSoup"></a>Requests + BeautifulSoup</h2><p>在选定<code>查询日期</code>后，品种选<code>全部</code>之后，点击<code>查询</code>进行抓包分析后，发现结果页面跳转到新的页面“<a href="http://218.25.154.81/PublicWeb/MainServlet”，并对页面分析发现结果为post方式，所以找到发送的form表单数据，查看是否能得到结果。" target="_blank" rel="external">http://218.25.154.81/PublicWeb/MainServlet”，并对页面分析发现结果为post方式，所以找到发送的form表单数据，查看是否能得到结果。</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">url = <span class="string">"http://218.25.154.81/PublicWeb/MainServlet"</span></div><div class="line">postdata =&#123;<span class="string">"action"</span>:<span class="string">"Pu00011_result"</span>,<span class="string">"Pu00011_Input.trade_date"</span>:<span class="string">"20170801"</span>,<span class="string">"Pu00011_Input.variety"</span>:<span class="string">"all"</span>,<span class="string">"Pu00011_Input.trade_type"</span>:<span class="string">"0"</span>,<span class="string">"Submit"</span>:<span class="string">"%B2%E9+%D1%AF"</span>&#125;</div><div class="line">r = requests.post(url,data = postdata)</div><div class="line"><span class="built_in">print</span>(r.text)</div></pre></td></tr></table></figure>
<p>却发现输出的为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;alert(<span class="string">'输入项包含非法字符！'</span>);window.history.back();&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>抓包分析发现post的数据<code>输入项包含非法字符！</code>，此时submit键值包含非法字符，当提交表单时，会发生 submit 事件，所以把它当成默认就好，再次执行以上代码，发现可以返回查询数据。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">url = <span class="string">"http://218.25.154.81/PublicWeb/MainServlet"</span></div><div class="line">postdata =&#123;<span class="string">"action"</span>:<span class="string">"Pu00011_result"</span>,<span class="string">"Pu00011_Input.trade_date"</span>:<span class="string">"20170801"</span>,<span class="string">"Pu00011_Input.variety"</span>:<span class="string">"all"</span>,<span class="string">"Pu00011_Input.trade_type"</span>:<span class="string">"0"</span>&#125;</div><div class="line">r = requests.post(url,data = postdata)</div><div class="line"><span class="built_in">print</span>(r.text)</div></pre></td></tr></table></figure>
<p>对于大连交易所日行情数据的抓包分析，常规方法可以通过requests的post方式发送json数据来获取所需数据，通过当月贸易日期构造循环来发送表单获取数据。</p>
<h2 id="用Selenium-和-Phantomjs处理需加载js的动态数据"><a href="#用Selenium-和-Phantomjs处理需加载js的动态数据" class="headerlink" title="用Selenium 和 Phantomjs处理需加载js的动态数据"></a>用Selenium 和 Phantomjs处理需加载js的动态数据</h2><p>当我用requests.get()方法获取数据时，返回的信息并没有找到对应的元素，进行抓包分析，发现页面动态加载了js，于是，我采用了<code>Phantomjs</code>+<code>Selenium</code>的方式获取这一类数据，但在后续的分析中发现，本页面同时使用了frame框架，使用<code>Phantomjs</code>+<code>Selenium</code>后并不会加载iframe框架中网页内容（iframe框架相当于在页面中又加载了一个页面），需要使用<code>Selenium</code>的<code>swtch_to.frame()</code>方法加载或者直接请求框架里的页面（即本问题中的<code>http://218.25.154.81/PublicWeb/MainServlet?action=Pu00011_search</code>）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">url = <span class="string">"http://218.25.154.81/PublicWeb/MainServlet?action=Pu00011_search"</span></div><div class="line">headers = &#123;<span class="string">"user-agent"</span>:<span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5"</span>&#125;</div><div class="line">r = requests.get(url,headers = header)</div><div class="line"><span class="built_in">print</span>(r.text)</div></pre></td></tr></table></figure>
<p>页面仍然需要加载js才能显示，所以还是需要用 <code>Phantomjs</code> + <code>Selenium</code> 来处理，接下来先做环境配置。</p>
<h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><p>Windows 10 / 64位</p>
<p>Python 3.6.0</p>
<h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>selenium</code>是一个用于Web应用自动化程序测试的工具，测试直接运行在浏览器中，就像真正的用户在操作一样</p>
<p><code>selenium2</code>支持通过驱动真实浏览器（FirfoxDriver，IternetExplorerDriver，OperaDriver，ChromeDriver）</p>
<p><code>selenium2</code>支持通过驱动无界面浏览器（HtmlUnit，PhantomJs）</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>可以直接在自己的pip安装目录下输入命令安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -U selenium</div></pre></td></tr></table></figure>
<h3 id="Phantomjs"><a href="#Phantomjs" class="headerlink" title="Phantomjs"></a>Phantomjs</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><code>PhantomJS</code> 是一个基于 <code>WebKit</code>（WebKit是一个开源的浏览器引擎，Chrome，Safari就是用的这个浏览器引擎） 的服务器端 <code>JavaScript API</code>，即基于webkit的没有界面的浏览器。</p>
<p>主要应用场景是：无需浏览器的 Web 测试，页面访问自动化，屏幕捕获，网络监控</p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>下载源码安装，<a href="http://phantomjs.org/download.html" target="_blank" rel="external">下载地址</a>。</p>
<p>解压并把解压缩的路径<code>D:\Python\phantomjs-2.1.1-windows\bin\</code><br>添加到环境变量中即可。</p>
<p>Python 可以使用 <code>Selenium</code> 执行 <code>javascript</code> ，<code>Selenium</code> 可以让浏览器自动加载页面，获取需要的数据。<code>Selenium</code> 自己不带浏览器，可以使用第三方浏览器如Firefox，Chrome等，也可以使用headless浏览器如<code>PhantomJS</code>在后台执行。</p>
<p>首先，在一般的浏览器都是像Chrome、Firefox之类的有图形界面的，但是这种GUI浏览器其实执行效率比较慢，因为要渲染出图形来，那么无GUI的浏览器的优势就有了，无GUI意味着占用资源少了，执行效率快，而爬虫中如果是选择了模拟浏览器的方式来做页面请求，那么把GUI的浏览器换成无GUI的浏览器是可以在一定程度上提高爬虫速度，减少资源消耗的，所以本例中也选择了<code>Selenium</code> + <code>Phantomjs</code> 的方式处理爬虫。</p>
<h3 id="Selenium-PhantomJS-安装测试"><a href="#Selenium-PhantomJS-安装测试" class="headerlink" title="Selenium + PhantomJS 安装测试"></a>Selenium + PhantomJS 安装测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver  </div><div class="line">driver = webdriver.PhantomJS(executable_path=r<span class="string">"D:\Python\phantomjs-2.1.1-windows\bin\phantomjs.exe"</span>)  </div><div class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)  </div><div class="line">data = driver.title</div><div class="line">driver.save_screenshot(<span class="string">'baidu.png'</span>)  </div><div class="line"><span class="built_in">print</span>(data)</div></pre></td></tr></table></figure>
<p>如果输出的结果为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">百度一下，你就知道</div></pre></td></tr></table></figure>
<p>同时，在默认目录下生成百度的截图，则说明配置完成，接下来可以抓取页面了。</p>
<p><img src="http://i.imgur.com/L2X6Kva.png" alt=""></p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="Requests-BeautifulSoup-1"><a href="#Requests-BeautifulSoup-1" class="headerlink" title="Requests + BeautifulSoup"></a>Requests + BeautifulSoup</h2><p>详细代码如下，代码未做较好的优化，大神勿喷。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">from acmr.PriceCollection.user_agent import USER_AGENTS</div><div class="line">import random</div><div class="line">import xlwt</div><div class="line"></div><div class="line"><span class="comment"># 日期转化函数，将日期转化为'20170701'的格式</span></div><div class="line">def trade_date(year,month):</div><div class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> range(1,13):</div><div class="line">        date = []</div><div class="line">        <span class="keyword">if</span> month <span class="keyword">in</span> [1,3,5,7,8,10,12]:</div><div class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> range(1,32):</div><div class="line">                temp_date = <span class="string">"&#123;:04&#125;&#123;:02&#125;&#123;:02&#125;"</span>.format(year,month,day)</div><div class="line">                date.append(temp_date)</div><div class="line">        <span class="keyword">elif</span> month <span class="keyword">in</span> [4,6,9,11]:</div><div class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> range(1,31):</div><div class="line">                temp_date = <span class="string">"&#123;:04&#125;&#123;:02&#125;&#123;:02&#125;"</span>.format(year, month, day)</div><div class="line">                date.append(temp_date)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> year%4 == 0:</div><div class="line">                <span class="keyword">for</span> day <span class="keyword">in</span> range(1, 30):</div><div class="line">                    temp_date = <span class="string">"&#123;:04&#125;&#123;:02&#125;&#123;:02&#125;"</span>.format(year, month, day)</div><div class="line">                    date.append(temp_date)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">for</span> day <span class="keyword">in</span> range(1, 29):</div><div class="line">                    temp_date = <span class="string">"&#123;:04&#125;&#123;:02&#125;&#123;:02&#125;"</span>.format(year, month, day)</div><div class="line">                    date.append(temp_date)</div><div class="line">        <span class="built_in">return</span> date</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"月份输入错误！"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 获取html源码</span></div><div class="line">def get_html(url,postdata):</div><div class="line">    header = &#123;<span class="string">"user-agent"</span>:random.choice(USER_AGENTS)&#125;</div><div class="line">    r = requests.post(url,data=postdata,headers = header)</div><div class="line">    html = r.text.encode(<span class="string">"GB2312"</span>).decode(<span class="string">"GB18030"</span>)</div><div class="line">    <span class="built_in">return</span> html</div><div class="line"></div><div class="line"><span class="comment"># 解析html源码，抓取所需数据</span></div><div class="line">def parse_html(html):</div><div class="line">    soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)</div><div class="line">    table = []</div><div class="line">    <span class="keyword">if</span> soup.find(<span class="string">"p"</span>).get_text() == <span class="string">''</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"工作日！"</span>)</div><div class="line">        title = soup.find_all(<span class="string">"div"</span>)[0].get_text()</div><div class="line">        title2 = soup.find_all(<span class="string">"div"</span>)[1].get_text()</div><div class="line">        table.append([title])</div><div class="line">        table.append([title2.replace(<span class="string">"\xa0"</span>,<span class="string">" "</span>)])</div><div class="line">        trs = soup.find(<span class="string">"table"</span>,class_ = <span class="string">"table"</span>).find_all(<span class="string">"tr"</span>)</div><div class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</div><div class="line">            td =[td.get_text().replace(<span class="string">"\xa0"</span>,<span class="string">""</span>) <span class="keyword">for</span> td <span class="keyword">in</span> tr.find_all(<span class="string">"td"</span>)]</div><div class="line">            table.append(td)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span>(soup.find(<span class="string">"p"</span>).get_text())</div><div class="line">    <span class="built_in">return</span> table</div><div class="line"></div><div class="line"><span class="comment"># 写入excel，写成xls格式</span></div><div class="line">def write_xls(table,date):</div><div class="line">    file = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</div><div class="line">    <span class="comment"># 指定file以utf-8的格式打开</span></div><div class="line">    sheet = file.add_sheet(date)</div><div class="line">    <span class="keyword">for</span> i, p <span class="keyword">in</span> enumerate(table):</div><div class="line">        <span class="keyword">for</span> j, q <span class="keyword">in</span> enumerate(p):</div><div class="line">            sheet.write(i, j, q)</div><div class="line">    file.save(r<span class="string">'D:\Python\ProjectPy3\acmr\PriceCollection\DLCE\xls\&#123;&#125;.xls'</span>.format(date))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="string">''</span><span class="string">'</span></div><div class="line">    1.修改url</div><div class="line">    2.修改日期</div><div class="line">    '<span class="string">''</span></div><div class="line">    url = <span class="string">"http://218.25.154.81/PublicWeb/MainServlet"</span></div><div class="line">    <span class="keyword">for</span> date <span class="keyword">in</span> trade_date(2017,7):</div><div class="line">        postdata = &#123;</div><div class="line">            <span class="string">"action"</span>: <span class="string">"Pu00011_result"</span>,</div><div class="line">            <span class="string">"Pu00011_Input.trade_date"</span>:date,</div><div class="line">            <span class="string">"Pu00011_Input.variety"</span>: <span class="string">"all"</span>,</div><div class="line">            <span class="string">"Pu00011_Input.trade_type"</span>: <span class="string">"0"</span>&#125;</div><div class="line">        html = get_html(url,postdata)</div><div class="line">        table = parse_html(html)</div><div class="line">        write_xls(table,date)</div></pre></td></tr></table></figure>
<h2 id="用Selenium-和-Phantomjs处理需加载js的动态数据-1"><a href="#用Selenium-和-Phantomjs处理需加载js的动态数据-1" class="headerlink" title="用Selenium 和 Phantomjs处理需加载js的动态数据"></a>用Selenium 和 Phantomjs处理需加载js的动态数据</h2><h3 id="单日数据获取测试代码"><a href="#单日数据获取测试代码" class="headerlink" title="单日数据获取测试代码"></a>单日数据获取测试代码</h3><p>本代码可以选用谷歌浏览器或者火狐浏览器进行测试，也可以选用Phantomjs无头浏览器，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">import time,random</div><div class="line">from selenium import webdriver</div><div class="line">from selenium.webdriver.common.desired_capabilities import DesiredCapabilities</div><div class="line"></div><div class="line">dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line">header = (<span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5"</span>)</div><div class="line">dcap[<span class="string">"phantomjs.page.settings.User-Agent"</span>] = header</div><div class="line">driver = webdriver.PhantomJS(executable_path=r<span class="string">"D:\Python\phantomjs-2.1.1-windows\bin\phantomjs.exe"</span>,desired_capabilities=dcap) </div><div class="line">url = <span class="string">"http://218.25.154.81/PublicWeb/MainServlet?action=Pu00011_search"</span></div><div class="line">driver.set_page_load_timeout(5)</div><div class="line">driver.implicitly_wait(10)</div><div class="line">driver.get(url)</div><div class="line">input = driver.find_element_by_xpath(<span class="string">'//input[@name="Pu00011_Input.trade_date"]'</span>)</div><div class="line">input.clear()</div><div class="line">input.send_keys(<span class="string">"20170704"</span>)</div><div class="line">driver.find_element_by_xpath(<span class="string">'//input[@value="查 询"]'</span>).click()</div><div class="line"><span class="comment">#获取当前窗口句柄</span></div><div class="line">now_handle = driver.current_window_handle</div><div class="line"><span class="built_in">print</span>(now_handle)</div><div class="line"><span class="comment"># 获取全部窗口句柄</span></div><div class="line">all_handles = driver.window_handles</div><div class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> all_handles:</div><div class="line">    <span class="keyword">if</span> handle !=now_handle:</div><div class="line">        <span class="comment">#输出待选择的窗口句柄</span></div><div class="line">        <span class="built_in">print</span>(handle)</div><div class="line">        driver.switch_to_window(handle)</div><div class="line">        title = driver.find_element_by_xpath(<span class="string">'//div[@class="title"]'</span>).text</div><div class="line">        title2 = driver.find_element_by_xpath(<span class="string">'//div[@class="title2"]'</span>).text</div><div class="line">        <span class="built_in">print</span>(title,<span class="string">"---"</span>,title2)</div><div class="line"><span class="comment">#driver.save_screenshot("1.png")</span></div><div class="line">driver.switch_to_window(now_handle)</div><div class="line">driver.quit()</div></pre></td></tr></table></figure>
<p>单日数据爬取成功后在进行整个月的数据爬取，完整的代码如下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">import time,random</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">from acmr.PriceCollection.user_agent import USER_AGENTS</div><div class="line">from selenium import webdriver</div><div class="line">from selenium.webdriver.common.desired_capabilities import DesiredCapabilities</div><div class="line">from selenium.common.exceptions import TimeoutException</div><div class="line">import xlwt</div><div class="line"></div><div class="line"><span class="comment"># 日期转化函数，将日期转化为'20170701'的格式</span></div><div class="line">def trade_date(year,month):</div><div class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> range(1,13):</div><div class="line">        date = []</div><div class="line">        <span class="keyword">if</span> month <span class="keyword">in</span> [1,3,5,7,8,10,12]:</div><div class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> range(1,32):</div><div class="line">                temp_date = <span class="string">"&#123;:04&#125;&#123;:02&#125;&#123;:02&#125;"</span>.format(year,month,day)</div><div class="line">                date.append(temp_date)</div><div class="line">        <span class="keyword">elif</span> month <span class="keyword">in</span> [4,6,9,11]:</div><div class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> range(1,31):</div><div class="line">                temp_date = <span class="string">"&#123;:04&#125;&#123;:02&#125;&#123;:02&#125;"</span>.format(year, month, day)</div><div class="line">                date.append(temp_date)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> year%4 == 0:</div><div class="line">                <span class="keyword">for</span> day <span class="keyword">in</span> range(1, 30):</div><div class="line">                    temp_date = <span class="string">"&#123;:04&#125;&#123;:02&#125;&#123;:02&#125;"</span>.format(year, month, day)</div><div class="line">                    date.append(temp_date)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">for</span> day <span class="keyword">in</span> range(1, 29):</div><div class="line">                    temp_date = <span class="string">"&#123;:04&#125;&#123;:02&#125;&#123;:02&#125;"</span>.format(year, month, day)</div><div class="line">                    date.append(temp_date)</div><div class="line">        <span class="built_in">return</span> date</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"月份输入错误！"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 解析html源码，抓取所需数据</span></div><div class="line">def parse_html(html):</div><div class="line">    soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)</div><div class="line">    table = []</div><div class="line">    <span class="keyword">if</span> soup.find(<span class="string">"p"</span>).get_text() == <span class="string">''</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"工作日！"</span>)</div><div class="line">        title = soup.find_all(<span class="string">"div"</span>)[0].get_text()</div><div class="line">        title2 = soup.find_all(<span class="string">"div"</span>)[1].get_text()</div><div class="line">        table.append([title])</div><div class="line">        table.append([title2.replace(<span class="string">"\xa0"</span>,<span class="string">" "</span>)])</div><div class="line">        trs = soup.find(<span class="string">"table"</span>,class_ = <span class="string">"table"</span>).find_all(<span class="string">"tr"</span>)</div><div class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</div><div class="line">            td =[td.get_text().replace(<span class="string">"\xa0"</span>,<span class="string">""</span>) <span class="keyword">for</span> td <span class="keyword">in</span> tr.find_all(<span class="string">"td"</span>)]</div><div class="line">            table.append(td)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span>(soup.find(<span class="string">"p"</span>).get_text())</div><div class="line">    <span class="built_in">return</span> table</div><div class="line"></div><div class="line"><span class="comment"># 写入excel，写成xls格式</span></div><div class="line">def write_xls(table,date):</div><div class="line">    file = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</div><div class="line">    <span class="comment"># 指定file以utf-8的格式打开</span></div><div class="line">    sheet = file.add_sheet(date)</div><div class="line">    <span class="keyword">for</span> i, p <span class="keyword">in</span> enumerate(table):</div><div class="line">        <span class="keyword">for</span> j, q <span class="keyword">in</span> enumerate(p):</div><div class="line">            sheet.write(i, j, q)</div><div class="line">    file.save(r<span class="string">'D:\Python\ProjectPy3\acmr\PriceCollection\DLCE\xls\&#123;&#125;.xls'</span>.format(date))</div><div class="line"></div><div class="line"><span class="comment"># 获取数据写入excel</span></div><div class="line">def get_data(browser,url,dates):</div><div class="line">    browser.get(url)</div><div class="line">    <span class="comment"># 获取当前窗口句柄</span></div><div class="line">    now_handle = browser.current_window_handle</div><div class="line">    <span class="built_in">print</span>(now_handle)</div><div class="line">    <span class="keyword">for</span> date <span class="keyword">in</span> dates:</div><div class="line">        try:</div><div class="line">            input = browser.find_element_by_xpath(<span class="string">'//input[@name="Pu00011_Input.trade_date"]'</span>)</div><div class="line">            input.clear()</div><div class="line">            input.send_keys(date)</div><div class="line">            browser.find_element_by_xpath(<span class="string">'//input[@value="查 询"]'</span>).click()</div><div class="line">            <span class="comment"># time.sleep(5)</span></div><div class="line">        except TimeoutException:</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Click failed: timeout"</span>)</div><div class="line">        <span class="comment"># 获取全部窗口句柄</span></div><div class="line">        all_handles = browser.window_handles</div><div class="line">        <span class="keyword">for</span> handle <span class="keyword">in</span> all_handles:</div><div class="line">            <span class="keyword">if</span> handle != now_handle:</div><div class="line">                <span class="comment">#输出待选择的窗口句柄</span></div><div class="line">                <span class="built_in">print</span>(handle)</div><div class="line">                browser.switch_to_window(handle)</div><div class="line">                <span class="comment"># time.sleep(5)</span></div><div class="line">                <span class="keyword">if</span> browser.find_element_by_xpath(<span class="string">'//p[@align="center"]'</span>).text:</div><div class="line">                    <span class="built_in">print</span>(browser.find_element_by_xpath(<span class="string">'//p[@align="center"]'</span>).text)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    title = browser.find_element_by_xpath(<span class="string">'//div[@class="title"]'</span>).text</div><div class="line">                    title2 = browser.find_element_by_xpath(<span class="string">'//div[@class="title2"]'</span>).text</div><div class="line">                    <span class="built_in">print</span>(title, <span class="string">"---"</span>, title2)</div><div class="line">                    html = browser.page_source.encode(<span class="string">"GB2312"</span>).decode(<span class="string">"GB18030"</span>)</div><div class="line">                    table = parse_html(html)</div><div class="line">                    write_xls(table,date)</div><div class="line">                browser.close()  <span class="comment"># 关闭当前窗口，当出现异常时在任务浏览器中关闭PhantomJS，因为会有多个PhantomJS在运行状态，影响电脑性能</span></div><div class="line">        browser.switch_to_window(now_handle)</div><div class="line">    browser.quit() <span class="comment">#关闭浏览器。当出现异常时记得在任务浏览器中关闭PhantomJS，因为会有多个PhantomJS在运行状态，影响电脑性能L</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    url = <span class="string">"http://218.25.154.81/PublicWeb/MainServlet?action=Pu00011_search"</span></div><div class="line">    dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line">    <span class="comment"># 从USER_AGENTS列表中随机选一个浏览器头，伪装浏览器</span></div><div class="line">    dcap[<span class="string">"phantomjs.page.settings.User-Agent"</span>] = (random.choice(USER_AGENTS))</div><div class="line">    browser = webdriver.PhantomJS(executable_path=r<span class="string">"D:\Python\phantomjs-2.1.1-windows\bin\phantomjs.exe"</span>,desired_capabilities=dcap)</div><div class="line">    <span class="comment"># 设置全屏,调用启动的浏览器不是全屏的，有时候会影响某些操作</span></div><div class="line">    browser.maximize_window()</div><div class="line">    <span class="comment"># 设置页面完全加载的超时时间，完全加载即完全渲染完成，同步和异步脚本都执行完</span></div><div class="line">    browser.set_page_load_timeout(10)</div><div class="line">    <span class="comment"># 隐性等待设置为10秒</span></div><div class="line">    browser.implicitly_wait(10)</div><div class="line">    dates = trade_date(2017, 7)</div><div class="line">    get_data(browser,url,dates)</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>对于该问题，用requests库的post方法速度快，因为不需要js的加载，渲染等，并且大连商品交易所网站打开速度较慢，在用Selenium 和 Phantomjs方法获取数据的时候需设置好浏览器的渲染所需的时间，更适合选用常规方法。</li>
<li>选用Selenium 和 Phantomjs方法解析html获取数据的时候，也采用了BeautifulSoup库，因为方法1已经写好解析html的方法，虽然用selenium的xpath方法也可以获取，但是这样无疑增加工作量，直接用方法1的接口，提高代码的复用率。</li>
<li>由于时间有限，这两个方法均未进行良好的优化，可能有些功能不够简洁，所以之后有时间再来进行代码的回顾，将方法重构的更完善。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，对静态网页我一般采用”requests + BeautifulSoup + re”这三个库，可以解决大部分爬虫问题，如果工程量较大，一般会采用Scrapy框架处理爬虫，但有些网页是在加载时动态创建HTML内容，只有在js代码完全执行完后才会显示最终结果。如果用传统的方法抓取页面，就只能获得js代码执行之前页面上的内容，一般要解决这个问题有两种方法：&lt;/p&gt;
&lt;p&gt;1.直接分析接口，从js代码中抓取数据（执行js代码，解析js变量，不需要解析html）。&lt;/p&gt;
&lt;p&gt;2.用第三方库运行js，抓取运行后的最终html页面。&lt;/p&gt;
&lt;p&gt;所以对于通过Ajax、JavaScript等动态加载的网页，就需要通过”Phantomjs + CasperJS + Selenium”来实现了。本文解决的是在工作中遇到的一个小问题，即遇到需要执行页面上JavaScript才能爬取数据的网页，在分析问题后发现可以用两种方法解决该问题，一种是用提交表单数据的post方法来获取所需数据，另一种用 Selenium 和 Phantomjs处理js加载的动态数据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python爬虫" scheme="http://joshuazou.cn/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://joshuazou.cn/tags/Python/"/>
    
      <category term="Selenium" scheme="http://joshuazou.cn/tags/Selenium/"/>
    
      <category term="Phantomjs" scheme="http://joshuazou.cn/tags/Phantomjs/"/>
    
      <category term="JavaScript" scheme="http://joshuazou.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github 搭建静态博客</title>
    <link href="http://joshuazou.cn/2017/07/25/Hexo%20+%20Github%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://joshuazou.cn/2017/07/25/Hexo + Github 搭建静态博客/</id>
    <published>2017-07-25T02:00:00.000Z</published>
    <updated>2017-08-07T08:52:49.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong></p>
<p>最近用 Python 的 Pelican 搭建了自己的静态博客，<a href="https://zoujoshua.github.io" target="_blank" rel="external">效果预览</a>（目前已迁移到hexo）。在用 Pelican 搭建博客的过程中几乎 Pelican 支持的主题都试过，都没什么让自己满意的，最后才勉强选了个看的过去的主题，但是当我看到 Hexo 搭建的博客系统的时候，瞬间觉得 Hexo 的 NexT 主题简洁又大方，很喜欢，所以打算继续折腾下，顺便简单了解下 Node.js 的静态博客框架。<br><a id="more"></a></p>
</blockquote>
<h2 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h2><p>Hexo 出自台湾大学生tommy351之手,是由Node.js驱动的一款快速、简单且功能强大的博客框架。Node.js是一个可以快速构建网络服务及应用的平台，该平台的构建是基于Chrome’s JavaScript runtime，也就是说，实际上它是对Google V8引擎（应用于Google Chrome浏览器)进行了封装，而 V8 引擎执行Javascript的速度非常快，性能非常好。Node对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><strong>本地环境</strong></p>
<ul>
<li>Windows 10/64位</li>
</ul>
<p><strong>安装 Git Bash</strong></p>
<ul>
<li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">下载地址</a></li>
<li>双击下载好的exe文件，一路 Next就行</li>
<li><p>安装好后，打开Git Bash，用命令<code>git version</code>查看版本</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git version</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>安装 Node.js</strong></p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">下载地址</a>(说明：LTS为长期支持版，Current为当前最新版)</li>
<li>安装步骤：msi文件下载完成后，双击打开安装，一直 Next（<em>注意：在Custom Setup这一步记得选 Add to PATH ,这样就不需要自己去配置环境变量</em>），安装完成后打开 cmd ，在 cmd 中输入 path 可以看到你的 node 是否配置到环境变量里，如果没有，手动添加到环境变量。</li>
<li>查看版本 ： 在 cmd 中输入命令 <code>node -v</code></li>
</ul>
<p><strong>安装 Hexo</strong></p>
<ul>
<li>先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。</li>
<li><p>安装hexo命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm instal -g hexo （`-g`表示全局安装, `npm`默认为当前项目安装）</div></pre></td></tr></table></figure>
<p>  <em>node.js 和 git 安装好后，建议使用 git 提供的命令行窗口进行操作，windows自带的cmd会报错。</em></p>
</li>
<li><p>安装完成后，查看版本：<code>hexo -v</code></p>
<p>  <img src="http://i.imgur.com/89mkcaQ.png" alt=""></p>
</li>
<li><p>初始化命令：<code>hexo init</code> ，初始化完成之后打开所在的文件夹可以看到以下文件</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Nodejs-blog/</div><div class="line">├── node_modul          <span class="comment"># 依赖包目录，包含各类生成器/渲染器/服务器等</span></div><div class="line">├── public              <span class="comment"># 在运行hexo g和hexo s 后生成的静态页面目录</span></div><div class="line">├── scaffolds  			<span class="comment"># 命令生成文章等的模板的目录</span></div><div class="line">├── <span class="built_in">source</span>          	<span class="comment"># 用命令创建的各种文章的目录</span></div><div class="line">|   ├── _drafts   		<span class="comment"># 草稿（后期通过命令生成）</span></div><div class="line">|   └── _posts    		<span class="comment"># 文章</span></div><div class="line">├── themes         		<span class="comment"># 主题目录</span></div><div class="line">├── _config.yml     	<span class="comment"># 整个博客的配置文件</span></div><div class="line">├── db.json     		<span class="comment"># source解析所得到的文件</span></div><div class="line">└── package.json     	<span class="comment"># 项目所需模块项目的配置信息文件</span></div></pre></td></tr></table></figure>
</li>
<li><p>必备插件，建议一起安装（一般已在依赖包里自动生成，如果没有可执行以下命令）</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-index --save 		<span class="comment"># 索引生成器</span></div><div class="line">npm install hexo-generator-archive --save 		<span class="comment"># 归档生成器</span></div><div class="line">npm install hexo-generator-category --save 		<span class="comment"># 分类生成器</span></div><div class="line">npm install hexo-generator-tag --save 			<span class="comment"># 标签生成器</span></div><div class="line">npm install hexo-server --save 					<span class="comment"># 本地服务</span></div><div class="line">npm install hexo-deployer-git --save 			<span class="comment"># hexo通过git发布（必装）</span></div><div class="line">npm install hexo-renderer-marked@0.2.7--save 	<span class="comment"># 渲染器</span></div><div class="line">npm install hexo-renderer-stylus@0.3.0 --save 	<span class="comment"># 渲染器</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试是否配置成功</p>
<p>  生成静态页面，cd至之前初始化的目录，执行如下命令，即可生成静态页面至public目录</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>  启动本地服务，进行预览（必须安装hexo server）</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>  浏览器输入 <code>localhost:4000</code> 即可访问默认的 <code>Hexo</code> 博客效果。如果没有报错则表示 <code>Hexo</code> 基本配置安装成功，可进行自定义定制。</p>
<p>  如果访问 <code>http://localhost:4000/</code> 无反应，可能由于默认端口被占用引起的。使用 Ctrl+C 中断本地服务，使用命令自定义端口 <code>hexo s -p 5000</code> 重新开启本地服务，访问 <code>http://localhost:5000/</code> 可以看到博客页面了。</p>
</li>
<li><p>常用命令</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"postName"</span> 		<span class="comment"># 新建文章</span></div><div class="line">hexo new page <span class="string">"pageName"</span> 	<span class="comment"># 新建页面</span></div><div class="line">hexo generate 				<span class="comment"># 生成静态页面至public目录</span></div><div class="line">hexo server 				<span class="comment"># 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy 				<span class="comment"># 将.deploy目录部署到GitHub</span></div><div class="line">hexo <span class="built_in">help</span> 					<span class="comment"># 查看帮助</span></div><div class="line">hexo version 				<span class="comment"># 查看Hexo的版本</span></div></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo 组合命令</div><div class="line">hexo clean &amp;&amp; hexo g -s 	<span class="comment"># 清除、生成、启动</span></div><div class="line">hexo clean &amp;&amp; hexo g -d 	<span class="comment"># 清除、生成、部署</span></div></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo 命令缩写</div><div class="line">hexo g：hexo generate</div><div class="line">hexo c：hexo clean</div><div class="line">hexo s：hexo server</div><div class="line">hexo d：hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装主题NexT"><a href="#安装主题NexT" class="headerlink" title="安装主题NexT"></a>安装主题NexT</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下，可参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a>。</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> your-hexo-site  <span class="comment"># 进入自己的blog目录</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>当 克隆/下载 完成后，打开<code>站点配置文件 _config.yml</code>， 找到 theme 字段，并将其值更改为 next。</p>
<h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>NexT 主题安装完成后将验证主题是否正确启用。首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean 			<span class="comment"># 来清除 Hexo 的缓存</span></div><div class="line">hexo s --debug</div></pre></td></tr></table></figure>
<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>此时即可使用浏览器访问 <code>http://localhost:4000</code> ，检查站点是否正确运行，打开后是 NexT 默认的 Scheme —— Muse。</p>
<h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>在 <code>Hexo</code> 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 <code>Hexo</code> 本身的配置；另一份位于主题<code>themes</code>目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>， 后者称为 <code>主题配置文件</code>。</p>
<h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><p><code>Scheme</code> 是 <code>NexT</code> 提供的一种特性，借助于 <code>Scheme</code>，<code>NexT</code> 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 <code>Scheme</code> 之间共用。目前 <code>NexT</code> 支持三种 <code>Scheme</code>，他们是：</p>
<ul>
<li><code>Muse</code> - 默认 <code>Scheme</code>，这是 <code>NexT</code> 最初的版本，黑白主调，大量留白</li>
<li><code>Mist</code> - <code>Muse</code> 的紧凑版本，整洁有序的单栏外观</li>
<li><code>Pisces</code> - 双栏 <code>Scheme</code>，小家碧玉似的清新</li>
</ul>
<p><code>Scheme</code> 的切换通过更改 主题配置文件，搜索 <code>scheme</code> 关键字。 你会看到有三行 <code>scheme</code> 的配置，将你需用启用的 <code>scheme</code> 前面注释 # 即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Schemes</span></div><div class="line">scheme: Muse</div><div class="line"><span class="comment">#scheme: Mist</span></div><div class="line"><span class="comment">#scheme: Pisces</span></div></pre></td></tr></table></figure>
<h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>编辑 <code>站点配置文件</code>， 将 <code>language</code> 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">language: zh-Hans</div></pre></td></tr></table></figure>
<h3 id="网站logo设置"><a href="#网站logo设置" class="headerlink" title="网站logo设置"></a>网站logo设置</h3><ul>
<li>通过网站<a href="http://tool.lu/favicon/" target="_blank" rel="external">favicon在线制作</a>制作<code>favicon</code>图片，<code>logo</code>最好设置<code>32*32</code>。</li>
<li><code>next</code>主题：将图片放在站点<code>source</code>目录下新建 <code>images</code>文件夹</li>
<li><p>在<code>next 主题配置文件</code>中修改：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon: /images/favicon.ico</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改网站相关信息"><a href="#修改网站相关信息" class="headerlink" title="修改网站相关信息"></a>修改网站相关信息</h3><p>编辑 <code>站点配置文件</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line">title: 	心安即行 自在欢喜						<span class="comment"># 网站title</span></div><div class="line">subtitle: 一生所求  爱与自由  你与温柔			<span class="comment"># 副标题，网站名下面描述</span></div><div class="line">description: 数据科学、数据挖掘分析博客		<span class="comment"># 网站描述，便于搜索引擎用关键词检索，也可以是自己喜欢的签名</span></div><div class="line">author: Joshua Zou							<span class="comment"># 网站作者昵称</span></div><div class="line">language: zh-Hans</div><div class="line">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>
<h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 <code>© 2013 - 2015</code>。 编辑 <code>主题配置文件</code>，新增字段 <code>since</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">since: 2016</div></pre></td></tr></table></figure>
<h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 <code>NexT</code> 使用的是 <code>Font Awesome</code> 提供的图标， <a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a> 提供了 <code>600+</code> 的图标，可以满足绝大的多数的场景，同时无须担心在 <code>Retina</code> 屏幕下图标模糊的问题。</p>
<p>编辑 <code>主题配置文件</code>，修改以下内容：</p>
<ul>
<li><p>设定菜单内容，对应的字段是 <code>menu</code>。</p>
<p>  菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name</code> 是一个名称，这个名称并不直接显示在页面上，它将用于匹配图标以及翻译。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">     archives: /archives</div><div class="line">     about: /about</div><div class="line">     categories: /categories</div><div class="line">     tags: /tags</div><div class="line">     <span class="comment">#commonweal: /404.html</span></div><div class="line">  search: /search</div></pre></td></tr></table></figure>
</li>
<li><p>置菜单项的显示文本。</p>
<p>  在第一步中设置的菜单的名称并不直接用于界面上的展示。<code>Hexo</code> 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 <code>NexT</code> 主题目录下的 <code>languages/{language}.yml</code> （{<code>language</code>} 为你所使用的语言）。</p>
<p>  以简体中文为例，若你需要添加一个菜单项，比如 <code>life</code>。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在 <code>menu</code> 字段下添加一项：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">	home: 首页</div><div class="line">	archives: 归档</div><div class="line">	categories: 分类</div><div class="line">	tags: 标签</div><div class="line">	about: 关于</div><div class="line">	search: 搜索</div><div class="line">	commonweal: 公益404</div><div class="line">	life: 生活日志</div></pre></td></tr></table></figure>
</li>
<li><p>设定菜单项的图标，对应的字段是 <code>menu_icons</code>。</p>
<p>  此设定格式是 <code>item name: icon name</code>，其中 <code>item name</code> 与上一步所配置的菜单名字对应，<code>icon name</code> 是 <code>Font Awesome</code> 图标的 名字。而 <code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">menu_icons:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  <span class="comment"># Icon Mapping.</span></div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line">  search: search</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="添加「标签」「分类」「关于」页面"><a href="#添加「标签」「分类」「关于」页面" class="headerlink" title="添加「标签」「分类」「关于」页面"></a>添加「标签」「分类」「关于」页面</h4><ul>
<li>新建页面</li>
</ul>
<p>在终端窗口下，定位到 <code>Hexo</code> 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 <code>tags</code> ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> your-hexo-site</div><div class="line">hexo new page tags</div></pre></td></tr></table></figure>
<ul>
<li>设置页面类型</li>
</ul>
<p>编辑刚新建的页面，将页面的类型设置为 <code>tags</code> ，主题将自动为这个页面显示标签云。页面内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 标签/分类</div><div class="line">date: 2014-12-22 12:39:04</div><div class="line"><span class="built_in">type</span>: <span class="string">"tags"</span>/<span class="string">"categories"</span></div><div class="line">comments: <span class="literal">false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果有启用 <code>多说</code> 或者 <code>Disqus</code> 评论，页面也会带有评论。 若需要关闭的话，请添加字段 <code>comments</code> 并将值设置为 <code>false</code>.</p>
</blockquote>
<ul>
<li>修改菜单</li>
</ul>
<p>在菜单中添加链接。编辑 <code>主题配置文件</code> ， 添加 <code>tags</code> 到 <code>menu</code> 中，如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  categories: /categories</div><div class="line">  tags: /tags</div></pre></td></tr></table></figure>
<h4 id="腾讯公益-404-页面"><a href="#腾讯公益-404-页面" class="headerlink" title="腾讯公益 404 页面"></a>腾讯公益 404 页面</h4><p><code>source</code> 目录下新建 <code>404.html</code> 页面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</div><div class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge,chrome=1"</span> /&gt;</div><div class="line">  &lt;meta name=<span class="string">"robots"</span> content=<span class="string">"all"</span> /&gt;</div><div class="line">  &lt;meta name=<span class="string">"robots"</span> content=<span class="string">"index,follow"</span>/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"http://www.qq.com/404/search_children.js"</span> charset=<span class="string">"utf-8"</span> homePageUrl=<span class="string">"your-site-url"</span> homePageName=<span class="string">"回到我的主页"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="设置侧栏"><a href="#设置侧栏" class="headerlink" title="设置侧栏"></a>设置侧栏</h3><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 <code>主题配置文件</code> 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>
<ul>
<li><p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p>
<p>  <code>left</code> - 靠左放置</p>
<p>  <code>right</code> - 靠右放置</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sidebar:</div><div class="line"> 		position: right</div></pre></td></tr></table></figure>
</li>
<li><p>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：</p>
<p>  <code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</p>
<p>  <code>always</code> - 在所有页面中都显示</p>
<p>  <code>hide</code> - 在所有页面中都隐藏（可以手动展开）</p>
<p>  <code>remove</code> - 完全移除</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sidebar:</div><div class="line"> 	  display: post</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h4><p>侧栏社交链接的修改包含两个部分，第一是<code>链接</code>，第二是<code>链接图标</code>。 两者配置均在 <code>主题配置文件</code> 中。</p>
<ul>
<li><p><code>链接</code>放置在 <code>social</code> 字段下，一行一个链接。其键值格式是 <code>显示文本: 链接地址</code>。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Social links</span></div><div class="line">social:</div><div class="line">  GitHub: https://github.com/your-user-name</div><div class="line">  Twitter: https://twitter.com/your-user-name</div><div class="line">  微博: http://weibo.com/your-user-name</div><div class="line">  知乎: http://www.zhihu.com/people/your-user-name</div><div class="line">  <span class="comment"># 等等</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>链接的图标</code>，对应的字段是 <code>social_icons</code>。其键值格式是 <code>匹配键: Font Awesome 图标名称</code>，匹配键与上一步所配置的链接的显示文本相同（大小写严格匹配），图标名称是<code>Font Awesome</code> 图标的名字（不必带 fa- 前缀）。<code>enable</code> 选项用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Social Icons</span></div><div class="line">social_icons:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  <span class="comment"># Icon Mappings</span></div><div class="line">  GitHub: github</div><div class="line">  Twitter: twitter</div><div class="line">  微博: weibo</div><div class="line">  知乎: user-circle</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><p>编辑 <code>主题配置文件</code> 添加：</p>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Blog rolls</span></div><div class="line">links_title: Links</div><div class="line">links:</div><div class="line">  WC: https://weichangit.github.io/</div></pre></td></tr></table></figure>
</code></pre><h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h4><p>编辑 <code>站点配置文件</code>， 修改字段 <code>avatar</code> 值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<ul>
<li>完整的互联网 URI: <a href="http://example.com/avatar.jpg" target="_blank" rel="external">http://example.com/avatar.jpg</a></li>
<li><p>站点内的地址</p>
<p>  将头像放置站点目录下的 source/uploads/ （新建uploads目录若不存在）配置为：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">avatar: /uploads/avatar.jpg</div></pre></td></tr></table></figure>
<p>  或者放置在主题目录下 source/images/ 目录下配置为：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">avatar: /images/avatar.jpg</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="优化主题-sidebar-头像"><a href="#优化主题-sidebar-头像" class="headerlink" title="优化主题 sidebar 头像"></a>优化主题 sidebar 头像</h4><p>为自己的头像添加旋转效果。</p>
<p>修改 <code>/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</code> 文件，在<code>.site-author-image {}</code>内后面添加如下代码。（要保证自己的头像，也就是 <code>avatar.jpg</code> 这个图片是正方形，不是的话你要将其修改成正方形，这样才能通过样式将其展现为很好看的正圆，否则会是一个椭圆形）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">  /* 头像圆形 */</div><div class="line">  border-radius: 80px;</div><div class="line">  -webkit-border-radius: 80px;</div><div class="line">  -moz-border-radius: 80px;</div><div class="line">  box-shadow: inset 0 -1px 0 <span class="comment">#333sf;</span></div><div class="line">  </div><div class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</div><div class="line">  -webkit-animation: play 2s ease-out 1s 1;</div><div class="line">  -moz-animation: play 2s ease-out 1s 1;</div><div class="line">  animation: play 2s ease-out 1s 1;</div><div class="line">  </div><div class="line">  /* 鼠标经过头像旋转360度 */</div><div class="line">  -webkit-transition: -webkit-transform 1.5s ease-out;</div><div class="line">  -moz-transition: -moz-transform 1.5s ease-out;</div><div class="line">  transition: transform 1.5s ease-out;</div><div class="line">&#125;</div><div class="line">img:hover &#123;</div><div class="line">  /* 鼠标经过停止头像旋转 </div><div class="line">  -webkit-animation-play-state:paused;</div><div class="line">  animation-play-state:paused;*/</div><div class="line">  </div><div class="line">  /* 鼠标经过头像旋转360度 */</div><div class="line">  -webkit-transform: rotateZ(360deg);</div><div class="line">  -moz-transform: rotateZ(360deg);</div><div class="line">  transform: rotateZ(360deg);</div><div class="line">&#125;</div><div class="line">/* Z 轴旋转动画 */</div><div class="line">@-webkit-keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    -webkit-transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    -webkit-transform: rotateZ(-360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@-moz-keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    -moz-transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    -moz-transform: rotateZ(-360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@keyframes play &#123;</div><div class="line">  0% &#123;</div><div class="line">    transform: rotateZ(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    transform: rotateZ(-360deg);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="给博客添加LICENSE"><a href="#给博客添加LICENSE" class="headerlink" title="给博客添加LICENSE"></a>给博客添加LICENSE</h4><p>在主题配置文件中添加下面这段代码（添加之前好好看看你的主题配置文件是否已经包含这段代码，已经包含就不用再加一遍了，因为重复会报错），这个<code>LICENSE</code>显示在侧边栏。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Creative Commons 4.0 International License.</span></div><div class="line"><span class="comment"># http://creativecommons.org/</span></div><div class="line"><span class="comment"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></div><div class="line">creative_commons: by-nc-sa</div><div class="line"><span class="comment">#creative_commons:</span></div></pre></td></tr></table></figure>
<h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p><code>NexT</code> 中 <code>RSS</code> 有三个设置选项，满足特定的使用场景。 更改 <code>主题配置文件</code>，设定 <code>rss</code> 字段的值：</p>
<ul>
<li><code>false</code>：禁用 <code>RSS</code>，不在页面上显示 <code>RSS</code> 连接</li>
<li><p>留空：使用 <code>Hexo</code> 生成的 <code>Feed</code> 链接。 你可以需要先安装 <code>hexo-generator-feed</code> 插件。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
</li>
<li><p>具体的链接地址：适用于已经烧制过 <code>Feed</code> 的情形</p>
</li>
</ul>
<h3 id="添加听音乐"><a href="#添加听音乐" class="headerlink" title="添加听音乐"></a>添加听音乐</h3><h4 id="代码设置"><a href="#代码设置" class="headerlink" title="代码设置"></a>代码设置</h4><p>在 <code>\themes\next\layout\_macro</code> 目录下新建 <code>high.swig</code> 文件，添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;a title=<span class="string">"收藏到书签，偶尔Relax一下!"</span> rel=<span class="string">"alternate"</span> class=<span class="string">"mw-harlem_shake_slow wobble shake"</span> href=<span class="string">'javascript:(</span></div><div class="line">    /*</div><div class="line">     * Copyright (C) 2015 Rocko (rocko.xyz) &lt;rocko.zxp@gmail.com&gt;</div><div class="line">     *</div><div class="line">     * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">     * you may not use this file except in compliance with the License.</div><div class="line">     </div><div class="line">     * Unless required by applicable law or agreed to in writing, software</div><div class="line">     * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">     * See the License for the specific language governing permissions and</div><div class="line">     * limitations under the License.</div><div class="line">     */</div><div class="line">    function go() &#123;</div><div class="line">    </div><div class="line">      var songs = [</div><div class="line">          "http://otr5y24lm.bkt.clouddn.com/music/blog/Josh%20Vietti%20-%20Where%20Is%20the%20Love.mp3", </div><div class="line">          "http://otr5y24lm.bkt.clouddn.com/music/blog/TRON%20-%20%E4%B8%80%E7%94%9F%E6%89%80%E7%88%B1%EF%BC%88Cover%20%E5%8D%A2%E5%86%A0%E5%BB%B7%EF%BC%89.mp3",</div><div class="line">          "http://otr5y24lm.bkt.clouddn.com/music/blog/Bobby%20Tinsley%20-%20Missing%20You.mp3",    </div><div class="line">          "http://otr5y24lm.bkt.clouddn.com/music/blog/%E9%9F%A9%E7%BA%A2%20-%20%E4%B8%80%E4%B8%AA%E4%BA%BA.mp3"    </div><div class="line">          "......"</div><div class="line">      ];</div><div class="line"> </div><div class="line">      function S() &#123;</div><div class="line">          var e = document.getElementById("audio_element_id");</div><div class="line">          if(e != null)&#123;</div><div class="line">              var index = parseInt(e.getAttribute("curSongIndex"));</div><div class="line">              if(index &gt; songs.length - 2) &#123;</div><div class="line">                  index = 0;</div><div class="line">              &#125; else &#123;</div><div class="line">                  index++;</div><div class="line">              &#125;</div><div class="line">              e.setAttribute("curSongIndex", index);</div><div class="line">          &#125;</div><div class="line">          e.src = i;</div><div class="line">          e.play()</div><div class="line">      &#125;</div><div class="line">      function initAudioEle() &#123;</div><div class="line">          var e = document.getElementById("audio_element_id");</div><div class="line">          if(e === null)&#123;</div><div class="line">            e = document.createElement("audio");</div><div class="line">            e.setAttribute("curSongIndex", 0);</div><div class="line">            e.id = "audio_element_id";</div><div class="line">            e.loop = false;</div><div class="line">            e.bgcolor = 0;</div><div class="line">            e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;";</div><div class="line">            document.body.appendChild(e);</div><div class="line">            e.addEventListener("ended", function() &#123;</div><div class="line">              go();</div><div class="line">            &#125;, true);</div><div class="line">          &#125;        </div><div class="line">      &#125;</div><div class="line">    </div><div class="line">      initAudioEle();</div><div class="line">      var curSongIndex = parseInt(document.getElementById("audio_element_id").getAttribute("curSongIndex"));</div><div class="line">      var i = songs[curSongIndex];</div><div class="line">      S();</div><div class="line">    &#125;)()'&gt;</div><div class="line">    &lt;i class=<span class="string">"fa fa-music"</span>&gt;&lt;/i&gt; 听音乐&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>在侧边栏引用该文件：</p>
<p>修改 <code>\themes\next\layout\_macro\sidebar.swig</code> ，添加以下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include <span class="string">'high.swig'</span> %&#125;</div></pre></td></tr></table></figure>
<p>样式修改：</p>
<p>使 <code>听音乐</code> 和 <code>RSS</code> 并排展示，修改 <code>\themes\next\source\css\_schemes\Pisces\_sidebar.styl</code> 文件(我选的Muse这个样式，默认并排展示)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">display: inline-block;</div></pre></td></tr></table></figure>
<h4 id="音乐链接获取"><a href="#音乐链接获取" class="headerlink" title="音乐链接获取"></a>音乐链接获取</h4><p>直接打开 <a href="http://music.163.com/" target="_blank" rel="external">网易云音乐网页版</a> 搜索自己喜欢的音乐，下载下来上传到自己的服务器，我的放在<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云</a>上，自己注册后有一定的免费的空间，可以放图片、音乐等，这样在别人访问自己的博客的时候可以加快速度。</p>
<p>在<code>high.swig</code>文件中添加自己喜欢的音乐：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var songs = [</div><div class="line">      <span class="string">"http://otr5y24lm.bkt.clouddn.com/music/blog/Josh%20Vietti%20-%20Where%20Is%20the%20Love.mp3"</span>, </div><div class="line">          <span class="string">"http://otr5y24lm.bkt.clouddn.com/music/blog/TRON%20-%20%E4%B8%80%E7%94%9F%E6%89%80%E7%88%B1%EF%BC%88Cover%20%E5%8D%A2%E5%86%A0%E5%BB%B7%EF%BC%89.mp3"</span>,</div><div class="line">          <span class="string">"http://otr5y24lm.bkt.clouddn.com/music/blog/Bobby%20Tinsley%20-%20Missing%20You.mp3"</span>,    </div><div class="line">          <span class="string">"http://otr5y24lm.bkt.clouddn.com/music/blog/%E9%9F%A9%E7%BA%A2%20-%20%E4%B8%80%E4%B8%AA%E4%BA%BA.mp3"</span>    </div><div class="line">      <span class="string">"......"</span></div><div class="line">  ];</div></pre></td></tr></table></figure>
<p>首页听音乐摇晃：</p>
<p>需要加载 <code>css</code> 样式，在 <code>themes\next\layout\_layout.swig</code> 文件的 <code>&lt;/body&gt;</code> 标签前添加以下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 听音乐摇晃 --&gt;</div><div class="line">&lt;link href=<span class="string">"http://s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css"</span> rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div></pre></td></tr></table></figure>
<p>注意：有时候使用 <code>Firefox</code> 、<code>Chrome</code>时会提示非法插件并禁止使用，遇到这种情况我们把样式代码引入到 <code>\themes\next\source\css\_custom\custom.stly</code> 文件即可解决。</p>
<h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 <code>主题配置文件</code> 中填入 <code>微信</code> 和 <code>支付宝</code> 收款二维码图片地址即可开启该功能。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</div><div class="line">wechatpay: /path/to/wechat-reward-image</div><div class="line">alipay: /path/to/alipay-reward-image</div></pre></td></tr></table></figure>
<h3 id="首页分割线"><a href="#首页分割线" class="headerlink" title="首页分割线"></a>首页分割线</h3><p>在 <code>\themes\next\source\css\_custom\custom.styl</code> 文件中添加以下代码，可以修改博客首页中每篇文章的分割线长度，我设置为了100%长度。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//index页面中每篇文章相隔的那条线</div><div class="line">.posts-expand &#123;</div><div class="line">  .post-eof &#123;</div><div class="line">    display: block;</div><div class="line">    margin: <span class="variable">$post</span>-eof-margin-top auto <span class="variable">$post</span>-eof-margin-bottom;</div><div class="line">    width: 100%;</div><div class="line">    height: 3px;</div><div class="line">    background: <span class="variable">$grey</span>-light;</div><div class="line">    text-align: center;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为博客加入动态背景"><a href="#为博客加入动态背景" class="headerlink" title="为博客加入动态背景"></a>为博客加入动态背景</h3><p>首先找到<code>\themes\next\layout\_layout.swig</code>，在末尾前加上下面一句:（这里提供两种样式，当然你也可以自由更改）。</p>
<ul>
<li><p>默认灰色线条</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/particle.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>浅蓝色线条</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/particle.js"</span> count=<span class="string">"50"</span> zindex=<span class="string">"-2"</span> opacity=<span class="string">"1"</span> color=<span class="string">"0,104,183"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后在 <code>themes\source\js\src</code> 下新建文件 <code>particle.js</code> 写上以下代码:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="title">function</span></span>()&#123;<span class="keyword">function</span> n(n,e,t)&#123;<span class="built_in">return</span> n.getAttribute(e)||t&#125;<span class="keyword">function</span> e(n)&#123;<span class="built_in">return</span> document.getElementsByTagName(n)&#125;<span class="keyword">function</span> <span class="function"><span class="title">t</span></span>()&#123;var t=e(<span class="string">"script"</span>),o=t.length,i=t[o-1];<span class="built_in">return</span>&#123;l:o,z:n(i,<span class="string">"zIndex"</span>,-1),o:n(i,<span class="string">"opacity"</span>,.5),c:n(i,<span class="string">"color"</span>,<span class="string">"0,0,0"</span>),n:n(i,<span class="string">"count"</span>,99)&#125;&#125;<span class="keyword">function</span> <span class="function"><span class="title">o</span></span>()&#123;c=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight&#125;<span class="keyword">function</span> <span class="function"><span class="title">i</span></span>()&#123;l.clearRect(0,0,c,a);var n,e,t,o,u,d,x=[w].concat(y);y.forEach(<span class="keyword">function</span>(i)&#123;<span class="keyword">for</span>(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;c||i.x&lt;0?-1:1,i.ya*=i.y&gt;a||i.y&lt;0?-1:1,l.fillRect(i.x-.5,i.y-.5,1,1),e=0;e&lt;x.length;e++)n=x[e],i!==n&amp;&amp;null!==n.x&amp;&amp;null!==n.y&amp;&amp;(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d&lt;n.max&amp;&amp;(n===w&amp;&amp;d&gt;=n.max/2&amp;&amp;(i.x-=.03*o,i.y-=.03*u),t=(n.max<span class="_">-d</span>)/n.max,l.beginPath(),l.lineWidth=t/2,l.strokeStyle=<span class="string">"rgba("</span>+m.c+<span class="string">","</span>+(t+.2)+<span class="string">")"</span>,l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),1)&#125;),r(i)&#125;var c,a,u=document.createElement(<span class="string">"canvas"</span>),m=t(),d=<span class="string">"c_n"</span>+m.l,l=u.getContext(<span class="string">"2d"</span>),r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||<span class="keyword">function</span>(n)&#123;window.setTimeout(n,1e3/45)&#125;,x=Math.random,w=&#123;x:null,y:null,max:2e4&#125;;u.id=d,u.style.cssText=<span class="string">"position:fixed;top:0;left:0;z-index:"</span>+m.z+<span class="string">";opacity:"</span>+m.o,e(<span class="string">"body"</span>)[0].appendChild(u),o(),window.onresize=o,window.onmousemove=<span class="keyword">function</span>(n)&#123;n=n||window.event,w.x=n.clientX,w.y=n.clientY&#125;,window.onmouseout=<span class="function"><span class="title">function</span></span>()&#123;w.x=null,w.y=null&#125;;<span class="keyword">for</span>(var y=[],s=0;m.n&gt;s;s++)&#123;var f=x()*c,h=x()*a,g=2*x()-1,p=2*x()-1;y.push(&#123;x:f,y:h,xa:g,ya:p,max:6e3&#125;)&#125;setTimeout(<span class="function"><span class="title">function</span></span>()&#123;i()&#125;,100)&#125;();</div></pre></td></tr></table></figure>
<h3 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h3><p><code>NexT</code> 使用 <code>Tomorrow Theme</code> 作为代码高亮，共有5款主题供你选择。 <code>NexT</code> 默认使用的是白色的 <code>normal</code> 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>。更改 <code>highlight_theme</code> 字段，将其值设定成你所喜爱的高亮主题。</p>
<h3 id="修改超链接颜色"><a href="#修改超链接颜色" class="headerlink" title="修改超链接颜色"></a>修改超链接颜色</h3><p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，像下面这样改掉这几行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Global link color.</div><div class="line"><span class="variable">$link</span>-color                   = <span class="variable">$my</span>-link-blue</div><div class="line"><span class="variable">$link</span>-hover-color             = <span class="variable">$my</span>-link-hover-blue</div><div class="line"><span class="variable">$link</span>-decoration-color        = <span class="variable">$gray</span>-lighter</div><div class="line"><span class="variable">$link</span>-decoration-hover-color  = <span class="variable">$my</span>-link-hover-blue</div></pre></td></tr></table></figure>
<h2 id="集成常用的第三方服务"><a href="#集成常用的第三方服务" class="headerlink" title="集成常用的第三方服务"></a>集成常用的第三方服务</h2><h3 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h3><p>添加<code>百度/谷歌/本地</code> 自定义站点内容搜索。</p>
<ul>
<li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>站点配置文件</code>，新增以下内容到任意位置：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  <span class="built_in">limit</span>: 10000</div></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>主题配置文件</code>，启用本地搜索功能：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Local search</span></div><div class="line">local_search:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="阅读次数统计（LeanCloud）"><a href="#阅读次数统计（LeanCloud）" class="headerlink" title="阅读次数统计（LeanCloud）"></a>阅读次数统计（LeanCloud）</h3><ul>
<li>配置<code>LeanCloud</code>：</li>
</ul>
<p>在注册完成 <a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a> 帐号并验证邮箱之后，我们就可以登录我们的<code>LeanCloud</code>帐号，进行一番配置之后拿到<code>AppID</code>以及<code>AppKey</code>这两个参数即可正常使用文章阅读量统计的功能了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">控制台 =&gt; 创建应用 =&gt; 创建class [Counter,无限制]=&gt; 设置 =&gt; 应用Key [AppID,AppKey]</div></pre></td></tr></table></figure>
<p>复制<code>AppID</code>以及<code>AppKey</code>并在<code>主题配置文件</code>中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">leancloud_visitors:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</div><div class="line">  app_key: E9UJsJpw1omCHuS22PdSpKoh</div></pre></td></tr></table></figure>
<blockquote>
<p> 需要特别说明的是：记录文章访问量的唯一标识符是文章的发布日期以及文章的标题，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</p>
</blockquote>
<h3 id="将阅读量改为热度（更个性）"><a href="#将阅读量改为热度（更个性）" class="headerlink" title="将阅读量改为热度（更个性）"></a>将阅读量改为热度（更个性）</h3><p>看到好多人的博客不是阅读次数（阅读量），而是xxx度，那么可以继续这样修改，首先在<code>Next</code>主题的<code>/themes/next/languages/zh-Hans</code>文件中查找”阅读次数“这几个字，可以看到，在<code>post</code>中的<code>visitors</code>被定义为“阅读次数”，把这里的“阅读次数”改为“热度”。</p>
<p>打开 <code>Next</code>主题文件夹中<code>layout/_macro/post.swig</code>，在这个文件里加上摄氏度的标志，在<code>&lt;span class=&quot;leancloud-visitors-count&quot;&gt;&lt;/span&gt;</code>下面增加一行<code>&lt;span&gt;℃&lt;/span&gt;</code>即可。</p>
<h3 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h3><ul>
<li><p>全局配置</p>
<p>  编辑<code>主题配置文件</code> 中的<code>busuanzi_count</code>的配置项。<br>  当<code>enable: true</code>时，代表开启全局开关。若<code>site_uv</code>、<code>site_pv</code>、<code>page_pv</code>的值均为false时，不蒜子仅作记录而不会在页面上显示。</p>
</li>
<li><p>站点UV配置</p>
<p>  <code>site_uv: true</code>时，代表在页面底部显示站点的UV值。<br>  <code>site_uv_header</code>和<code>site_uv_footer</code>为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）<code>font-awesome</code>。显示效果为<code>[site_uv_header]</code>UV值<code>[site_uv_footer]</code>。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 效果：本站访客数12345人次</span></div><div class="line">site_uv: <span class="literal">true</span></div><div class="line">site_uv_header: &lt;i class=<span class="string">"fa fa-user"</span>&gt;本站访客数&lt;/i&gt;</div><div class="line">site_uv_footer: 人次</div></pre></td></tr></table></figure>
</li>
<li><p>站点PV配置</p>
<p>  当<code>site_pv: true</code>时，代表在页面底部显示站点的PV值。<br>  <code>site_pv_heade</code>r和<code>site_pv_footer</code>为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）<code>font-awesome</code>。显示效果为<code>[site_pv_header]</code>PV值<code>[site_pv_footer]</code>。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 效果：本站总访问量12345次</span></div><div class="line">site_pv: <span class="literal">true</span></div><div class="line">site_pv_header: &lt;i class=<span class="string">"fa fa-eye"</span>&gt;本站总访问量&lt;/i&gt;</div><div class="line">site_pv_footer: 次</div></pre></td></tr></table></figure>
</li>
<li><p>单页PV配置</p>
<p>  当<code>page_pv: true</code>时，代表在文章页面的标题下显示该页面的PV值（阅读数）。<br>  <code>page_pv_header</code>和<code>page_pv_footer</code>为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）<code>font-awesome</code>。显示效果为<code>[page_pv_header]</code>PV值<code>[page_pv_footer]</code>。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 效果：本文总阅读量12345次</span></div><div class="line">page_pv: <span class="literal">true</span></div><div class="line">page_pv_header: &lt;i class=<span class="string">"fa fa-file-o"</span>&gt;本文总阅读量/热度&lt;/i&gt;</div><div class="line">page_pv_footer: 次/℃</div></pre></td></tr></table></figure>
<p>  单页PV配置可以和<code>LeanCloud</code>阅读次数选择其一。</p>
</li>
</ul>
<h3 id="添加-sitemap"><a href="#添加-sitemap" class="headerlink" title="添加 sitemap"></a>添加 sitemap</h3><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>谷歌与百度的站点地图，前者适用于其他搜索引擎，用来手动提交以增加收录。使用以下命令来安装针对百度和Google的地图插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<h4 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h4><p>配置<code>站点配置文件</code>_config.yml，启用相应插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Plugins:</div><div class="line">- hexo-generator-sitemap</div><div class="line">- hexo-generator-baidu-sitemap</div></pre></td></tr></table></figure>
<p>配置站点地图文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sitemap</span></div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml    </div><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure>
<p>配置成功后，<code>hexo g</code>编译时会在<code>hexo</code>站点根目录生成<code>sitemap.xml</code>和<code>baidusitemap.xml</code>。其中<code>sitemap.xml</code>适合提交给谷歌搜素引擎，<code>baidusitemap.xml</code>适合提交百度搜索引擎。<br>其次，在站点根目录下新建一个robots.txt文件，其中添加下面的一段代码（具体网站改为你自己的网址）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hexo robots.txt</span></div><div class="line">User-agent: *</div><div class="line">Allow: /</div><div class="line">Allow: /archives/</div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /js/</div><div class="line">Disallow: /css/</div><div class="line">Disallow: /fonts/</div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /fancybox/</div><div class="line">Sitemap: http://www.joshuazou.cn/sitemap.xml</div><div class="line">Sitemap: https://www.joshuazou.cn/sitemap.xml</div></pre></td></tr></table></figure>
<p>我们在百度里面搜索site:joshuazou.cn，发现没有我们的博客并没有被百度收录，也就是说你的博客别人可能会看不到，下面来解决这个问题：</p>
<p>进入<a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="external">链接提交</a>，然后<a href="http://zhanzhang.baidu.com/site/index" target="_blank" rel="external">验证网站所有权</a>，有三种方式可以选择，一般选择<code>文件验证</code>，下载<code>baidu_verify_qzE3XIJ4hj.html</code>文件到<code>source/</code>目录下面，修改<code>站点配置文件</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">skip_render: </div><div class="line">  - README.md</div><div class="line">  - baidu_verify_qzE3XIJ4hj.html</div></pre></td></tr></table></figure>
<p>但是，我经过多次验证总是失败，所以最终选择<code>CNAME验证</code>，<a href="http://jingyan.baidu.com/article/3d69c55152b587f0cf02d7c0.html" target="_blank" rel="external">详细步骤</a>。<br>按照说明完成验证，在百度站长平台里面的站点管理里面看到是否验证成功。</p>
<p>上面进行步骤成功之后，进入站点信息-&gt;网页抓取-&gt;链接提交-&gt;详情，按照说明进行设置。<br>因为Github主机禁止百度爬虫访问博客，导致博客无法被百度收录，而使用google的话就能搜索到github搭建的博客，所以我尝试了多种解决百度收录Github的方案，最终推荐采用百度站长工具，弥补百度蜘蛛无法抓取的不足，因此推荐<code>自动推送</code>。</p>
<p>从效率上来说：</p>
<p>主动推送&gt;自动推送&gt;sitemap</p>
<ul>
<li><p>设置自动推送</p>
<p>  安装自动推送插件，在根目录下执行</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-baidu-url-submit --save</div></pre></td></tr></table></figure>
<p>  <code>主题配置文件</code>下设置,将<code>baidu_push</code>设置为<code>true</code>：</p>
</li>
</ul>
<pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">baidu_push: <span class="literal">true</span></div></pre></td></tr></table></figure>

修改`站点配置文件`

<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">baidu_url_submit:</div><div class="line">count: 3 <span class="comment">## 比如3，代表提交最新的三个链接</span></div><div class="line">host: your web host <span class="comment">## 在百度站长平台中注册的域名</span></div><div class="line">token: your_token <span class="comment">## 请注意这是您的秘钥， 请不要发布在公众仓库里!</span></div><div class="line">path: baidu_urls.txt <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></div></pre></td></tr></table></figure>

在`站点配置文件`中加入新的部署

<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line"> - <span class="built_in">type</span>: git</div><div class="line">   repo:</div><div class="line">   github: xxxxxxxx</div><div class="line"> - <span class="built_in">type</span>: baidu_url_submitter</div></pre></td></tr></table></figure>

执行`hexo deploy`的时候，新的链接就会被推送了。
</code></pre><p>完成后可能需要等一段时间，在百度里面搜索site:joshuazou.cn，有记录说明是被收录了。</p>
<p>类似百度，通过HTML文件方式验证通过后，在站点里选择 抓取-&gt;站点地图里 添加/测试站点地图。<br>完成后等一段时间（大概一天时间）在Google里面搜索site:joshuazou.cn，就可以看到搜索结果了。</p>
<h4 id="页脚加入地图"><a href="#页脚加入地图" class="headerlink" title="页脚加入地图"></a>页脚加入地图</h4><p>在页脚加入百度地图和谷歌地图链接：</p>
<p>找到<code>\themes\next\layout\_partials\footer.swig</code>文件，百度和Google网站地图，上面已经安装了，这是插入到底栏的代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;span&gt;&lt;a href=<span class="string">"/sitemap.xml"</span>&gt;Google网站地图&lt;/a&gt;&lt;/span&gt;</div><div class="line">&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;span&gt;&lt;a href=<span class="string">"/baidusitemap.xml"</span>&gt;百度网站地图&lt;/a&gt;&lt;/span&gt;</div></pre></td></tr></table></figure>
<h3 id="增加留言页"><a href="#增加留言页" class="headerlink" title="增加留言页"></a>增加留言页</h3><p>在你的站点文件夹，用Git Bash等运行下面这行代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page <span class="string">"guestbook"</span></div></pre></td></tr></table></figure>
<p>找到<code>主题配置文件</code>，文件路径<code>\themes\next\_config.yml</code>，添加<code>guestbook</code>到<code>menu</code>中，如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  <span class="comment">#categories: /categories</span></div><div class="line">  about: /about</div><div class="line">  archives: /archives</div><div class="line">  <span class="comment"># tags: /tags</span></div><div class="line">  <span class="comment">#commonweal: /404.html</span></div><div class="line">  guestbook: /guestbook</div></pre></td></tr></table></figure>
<p>并将图标添加到<code>menu_icons</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">menu_icons:</div><div class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></div><div class="line">  <span class="comment">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span></div><div class="line">  guestbook: file-text</div></pre></td></tr></table></figure>
<p>找到你<code>Next</code>主题<code>zh-Hans.yml</code>文件，文件路径<code>\themes\next\languages\zh-Hans.yml</code>，添加<code>guestbook: 留言板</code>到<code>menu</code>中，如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: 首页</div><div class="line">  archives: 归档</div><div class="line">  categories: 分类</div><div class="line">  tags: 标签</div><div class="line">  about: 关于</div><div class="line">  search: 搜索</div><div class="line">  schedule: 日程表</div><div class="line">  sitemap: 站点地图</div><div class="line">  commonweal: 公益404</div><div class="line">  guestbook: 留言</div></pre></td></tr></table></figure>
<h3 id="添加友言评论系统"><a href="#添加友言评论系统" class="headerlink" title="添加友言评论系统"></a>添加友言评论系统</h3><p>注册<a href="http://www.uyan.cc" target="_blank" rel="external">友言</a>得到自己的<code>uid</code>，并在<code>主题配置文件</code>里设置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">youyan_uid: your-uid</div></pre></td></tr></table></figure>
<h3 id="文章配图"><a href="#文章配图" class="headerlink" title="文章配图"></a>文章配图</h3><p>在标题和摘要中间，插进一张<code>Logo</code>图片，而当点击进入后，就不会再显示这个<code>logo</code>图片了。</p>
<h4 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo/themes/next/<span class="built_in">source</span>/css/: 是next主题的样式文件，决定主题的外观。</div><div class="line">hexo/themes/next/<span class="built_in">source</span>/css/main.styl：汇总css文件夹中所有的样式。</div><div class="line">hexo/themes/next/<span class="built_in">source</span>/css/ _custom/custom.styl：是空的，专门让开发者扩展。</div></pre></td></tr></table></figure>
<p>需要在custom.styl里为图片设计一个专用容器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//图片外部的容器方框</div><div class="line">.out-img-topic &#123;</div><div class="line">  display: block;</div><div class="line">  max-height:300px;</div><div class="line">  margin-bottom: 24px;</div><div class="line">  overflow: hidden;</div><div class="line">&#125;</div><div class="line">//图片</div><div class="line">img.img-topic &#123;</div><div class="line">  display: block ;</div><div class="line">  margin-left: .7em;</div><div class="line">  margin-right: .7em;</div><div class="line">  padding: 0;</div><div class="line">  <span class="built_in">float</span>: right;</div><div class="line">  clear: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里图片外部的容器用来限制图片显示的大小，最大的高度为<code>300px</code>，</p>
<p><code>overflow: hidden</code>：让多余部分隐藏。</p>
<p><code>margin-bottom: 24px</code>：确保图片和文章摘要部分空出一定空间。</p>
<h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><p>修改 <code>/themes/next/layout/ _macro/post.swig</code> ，在 <code>if is_index</code> 与 <code>if post.description and theme.excerpt_description</code> 之间添加以下代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% <span class="keyword">if</span> post.images %&#125;</div><div class="line">    &lt;div class=<span class="string">"out-img-topic"</span>&gt;</div><div class="line">        &lt;img src=&#123;&#123; post.images &#125;&#125; class=<span class="string">"img-topic"</span>&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>在 <code>/scaffolds/post.md</code> ，加一个<code>images</code>字段，那么在创建新的文章时，填的图片地址就会一直作为文章的一个属性被传递。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">categories:</div><div class="line">tags:</div><div class="line">images:</div></pre></td></tr></table></figure>
<h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><h3 id="个人域名设置"><a href="#个人域名设置" class="headerlink" title="个人域名设置"></a>个人域名设置</h3><p>国内国外有很多的域名供应商，选择一个好的机构购买域名，会为自己的站点配置节约很多时间，也不会因为域名的出错，导致影响百度对我们个人博客的收录。近几年来，国内做的比较好的域名供应商有阿里的万网。我就是在阿里的万网购买的域名。通过查找，找到自己喜欢的域名。</p>
<ul>
<li><p>登录进入万网的域名控制台，点击”域名和网站”中的”云DNS”</p>
<p>  点击对应域名的”解析”，点击添加解析，记录类型选A或CNAME，A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是joshuazou.cn。</p>
<p>  <img src="http://otr5y24lm.bkt.clouddn.com/image/blog/2.png" alt=""></p>
</li>
</ul>
<p>这些全部设置完成后，此时你并不能要申请的域名访问你的博客。接着你需要做的是在<code>hexo</code>根目录的<code>source</code>文件夹里创建<code>CNAME</code>文件，不带任何后缀，里面添加你的域名信息，如：<code>joshuazou.cn</code>。实践证明如果此时你填写的是<code>www.joshua.cn</code>那么以后你只能用<code>www.joshua.cn</code>访问，而如果填写的是<code>joshua.cn</code>。那么用<code>www.joshua.cn</code>和<code>joshua.cn</code>访问都是可以的。</p>
<p>重新清理hexo,并发布即可用新的域名访问。</p>
<h4 id="发布文章到Github"><a href="#发布文章到Github" class="headerlink" title="发布文章到Github"></a>发布文章到Github</h4><p>如需调试，可在Git Bush中输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s --debug</div></pre></td></tr></table></figure>
<p>然后在<code>localhost:4000</code>中进行调试，修改后刷新浏览器，即可看到配置后的样式。</p>
<p>调试完成后，可以用以下命令发布：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>这样，就可以在自己的域名看到自己搭建的博客了，<a href="http://joshuazou.cn">进入围观</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近用 Python 的 Pelican 搭建了自己的静态博客，&lt;a href=&quot;https://zoujoshua.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;效果预览&lt;/a&gt;（目前已迁移到hexo）。在用 Pelican 搭建博客的过程中几乎 Pelican 支持的主题都试过，都没什么让自己满意的，最后才勉强选了个看的过去的主题，但是当我看到 Hexo 搭建的博客系统的时候，瞬间觉得 Hexo 的 NexT 主题简洁又大方，很喜欢，所以打算继续折腾下，顺便简单了解下 Node.js 的静态博客框架。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://joshuazou.cn/categories/Hexo/"/>
    
    
      <category term="blog" scheme="http://joshuazou.cn/tags/blog/"/>
    
      <category term="Node.js" scheme="http://joshuazou.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>将本地项目上传到Github</title>
    <link href="http://joshuazou.cn/2017/07/10/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/"/>
    <id>http://joshuazou.cn/2017/07/10/将本地项目上传到Github/</id>
    <published>2017-07-10T02:00:00.000Z</published>
    <updated>2017-08-01T09:38:01.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong></p>
<p>将自己新建的本地项目上传到 Github ，包括本地 Git 仓库设置及远程仓库 Github 设置。<br>本次操作需要用到管理工具<code>Git</code>，<a href="https://git-scm.com/" target="_blank" rel="external">点击下载</a>。</p>
</blockquote>
<a id="more"></a>
<h2 id="本地Git仓库设置"><a href="#本地Git仓库设置" class="headerlink" title="本地Git仓库设置"></a>本地Git仓库设置</h2><ol>
<li><p>创建Git配置文件。</p>
<p> 通过命令<code>git init</code>把即将要上传的本地项目文件夹变成Git可管理的仓库，即创建该项目的本地版本库。你会发现你的文件下生成一个<code>.git</code>文件夹，默认是隐藏文件。可通过<code>git status</code>来查看你当前的状态。Git安装好之后，打开所要上传的项目文件夹，鼠标右键点击windows系统下选择<code>Git Bash Here</code>。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git status</div></pre></td></tr></table></figure>
<p> <img src="https://i.imgur.com/IL1rdhx.png" alt="图片1"></p>
</li>
<li><p>通过<code>git add .</code>（.和add之间有空格）将当前所有文件添加到仓库上，仍可通过<code>git status</code>来查看你当前的状态。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git status</div></pre></td></tr></table></figure>
<p> <img src="https://i.imgur.com/UmgDwI5.png" alt="图片2"></p>
</li>
<li><p>用<code>git commit</code>把项目提交到仓库，<code>-m</code>后面引号里面是本次提交的注释内容，这个可以不写，但最好写上，不然会报错，详情自行Google。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"commit blog"</span></div></pre></td></tr></table></figure>
<p> <img src="https://i.imgur.com/CjcobJ0.png" alt="图片3"></p>
<p> 本地Git仓库这边的工作做完了，下面就到了连接远程仓库（也就是连接Github）</p>
</li>
</ol>
<h2 id="远程仓库Github设置"><a href="#远程仓库Github设置" class="headerlink" title="远程仓库Github设置"></a>远程仓库Github设置</h2><p>本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下，先在本地生成一<code>.ssh</code>。</p>
<ol>
<li><p>创建SSH KEY，先查看本地是否有.ssh文件，有的话删掉。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure>
</li>
<li><p>输入命令，生成.ssh，写你自己的邮箱。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your email@.com"</span></div></pre></td></tr></table></figure>
<p> 一直回车就可以，这样就表示成功了，会在C盘的用户目录的根目录下生成一个<code>.ssh</code>文件，如果找不到，可以搜索一下，文件下会有<code>id_rsa</code>与<code>id_rsa.pug</code>两个文件。</p>
<p> <img src="https://i.imgur.com/1NknRPR.png" alt="图片4"></p>
<p> 本地目录下生成的文件：</p>
<p> <img src="https://i.imgur.com/YAGYPRi.png" alt="图片5"></p>
</li>
<li><p>为了避免与Github创建连接时出错，可以新建一个config文件，将以下代码复制进去：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host github.com</div><div class="line">User git</div><div class="line">Hostname ssh.github.com</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line">Port 443</div></pre></td></tr></table></figure>
</li>
<li><p>登录Github，找到右上角的图标，打开点进里面的<code>Settings</code>，再选中里面的<code>SSH and GPG KEYS</code>，点击右上角的<code>New SSH key</code>，然后<code>Title</code>里面随便填，再把刚才<code>id_rsa.pub</code>里面的内容复制到<code>Title</code>下面的<code>Key</code>内容框里面，最后点击<code>Add SSH key</code>，这样就完成了SSH Key的加密。</p>
<p> <img src="https://i.imgur.com/AxCcxg3.png" alt="图片6"></p>
</li>
<li><p>测试连接是否成功，下图表示访问成功。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -t git@github.com</div></pre></td></tr></table></figure>
<p> <img src="https://i.imgur.com/DXkZk93.png" alt="图片7"></p>
</li>
<li><p>在Github上创建一个Git仓库。</p>
<p> <em>此时如果你勾选了<code>Initialize this repository with a README</code>（就是创建仓库的时候自动给你创建一个README文件），那么到了第8步你将本地仓库内容推送到远程仓库的时候就会报一个failed to push some refs to …的错误,这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，解决方法见第8步。</em></p>
<p> <img src="https://i.imgur.com/D71K5mn.png" alt="图片8"></p>
</li>
<li><p>Github 和 Git 的关联。</p>
<p> Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，注意origin后面加的是你Github上创建好的仓库的地址。根据创建好的Git仓库页面的提示，可以在本地blog仓库的命令行输入。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin https://github.com/ZouJoshua/pelican-blog.git</div></pre></td></tr></table></figure>
<p> <img src="https://i.imgur.com/4z7h5BP.png" alt="图片9"></p>
<p> 解决办法：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">先输入：$ git remote rm origin</div><div class="line">再输入：$ git remote add origin https://github.com/ZouJoshua/pelican-blog.git</div></pre></td></tr></table></figure>
</li>
<li><p>关联完成之后把本地库的所有内容推送到远程仓库（也就是Github）上</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<p> 由于新建的远程仓库是空的，所以要加上<code>-u</code>这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p> 此时，推送时，会出现如下错误：</p>
<p> <img src="https://i.imgur.com/9nh2vZb.png" alt="图片10"></p>
<p> 这是由于新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull --rebase origin master</div></pre></td></tr></table></figure>
<p> 然后再<code>git push</code>，登录Github查看，就会将自己的项目上传到Github。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将自己新建的本地项目上传到 Github ，包括本地 Git 仓库设置及远程仓库 Github 设置。&lt;br&gt;本次操作需要用到管理工具&lt;code&gt;Git&lt;/code&gt;，&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击下载&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://joshuazou.cn/categories/Git/"/>
    
    
      <category term="blog" scheme="http://joshuazou.cn/tags/blog/"/>
    
      <category term="git" scheme="http://joshuazou.cn/tags/git/"/>
    
      <category term="linux" scheme="http://joshuazou.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>采用Pelican+Github搭建数据科学博客</title>
    <link href="http://joshuazou.cn/2017/07/01/%E9%87%87%E7%94%A8Pelican+Github%E6%90%AD%E5%BB%BA%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%8D%9A%E5%AE%A2/"/>
    <id>http://joshuazou.cn/2017/07/01/采用Pelican+Github搭建数据科学博客/</id>
    <published>2017-07-01T06:00:00.000Z</published>
    <updated>2017-08-01T09:37:49.756Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong></p>
<p>在今年的个人计划中，想要搭建一个数据挖掘的平台，主要目的是，希望通过这件事能让自己对数据挖掘、机器学习的各种算法都很熟练，同时对搭建这样的平台框架有个基础的实践与认知。因此，就想在做这件事的时候能将自己趟过的坑记录整理下来，帮助自己从技术上提高。所以，首先得搭建一个自己的博客。虽然，目前网上有很多现成的博客系统，但是自己总觉得自定义的才是最炫酷的（其实并没有什么卵用），希望能一直坚持下来吧。本文采用 Python 的 Pelican 库搭建数据科学博客，并将 blog 挂在 Github Pages 上。</p>
</blockquote>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Pelican是一套开源的使用Python编写的博客静态生成, 可以添加文章和和创建页面, 可以使用<code>MarkDown</code>，<code>reStructuredText</code>和<code>AsiiDoc</code>的格式来书写, 同时使用 Disqus评论系统, 支持 RSS和Atom输出, 插件, 主题, 代码高亮等功能, 采用Jajin2模板引擎, 可以很容易的更改模板，也可以很容易的把文章部署到 GitHub Pages 让别人阅读，欢迎进入我的<a href="https://zoujoshua.github.io" target="_blank" rel="external">Blog 站点</a>进行效果预览。</p>
<h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><p>windows 10 64位/ubuntu 16.04（笔记本为win10，台式机为ubuntu系统）</p>
<p>Python 3.5</p>
<h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><p>Github Pages（把 Github 的仓库当成服务器）</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h4><p>如果你还没有安装 Python ，建议使用 Python 3.5，可以到官网<a href="http://www.python.org/" target="_blank" rel="external">安装</a>。</p>
<h4 id="安装Pelican"><a href="#安装Pelican" class="headerlink" title="安装Pelican"></a>安装Pelican</h4><p>建议在 Virtualenv （Python虚拟环境）下使用，创建并激活一个<a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="external">虚拟环境</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">virtualenvs blogs 		<span class="comment"># 创建blog的虚拟环境</span></div><div class="line"><span class="built_in">cd</span> blogs/scripts</div><div class="line">pip pelican</div><div class="line">activate				<span class="comment"># 激活虚拟环境</span></div><div class="line">mkdir blog 				<span class="comment"># 创建blog目录</span></div></pre></td></tr></table></figure>
<h4 id="安装Markdown"><a href="#安装Markdown" class="headerlink" title="安装Markdown"></a>安装Markdown</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> blogs/scripts</div><div class="line">pip install markdown</div></pre></td></tr></table></figure>
<h2 id="博客框架"><a href="#博客框架" class="headerlink" title="博客框架"></a>博客框架</h2><p>通过初始化 Pelican 设置生成一个基本的博客框架，在创建的文件夹下运行 pelican-quickstart 时，会开始一个交互式博客安装过程。根据提示一步一步输入相应的配置项，对于不了解 pelican 框架或第一次安装的情况下，大多数问题直接点击<code>Enter</code>接受默认即可，后续可以在<code>pelicanconf.py</code>文件里更改配置，个人<code>pelicanconf.py</code><a href="https://github.com/ZouJoshua/pelican-blog/blob/master/pelicanconf.py" target="_blank" rel="external">详细配置</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(blogs) D:\Python\envs\blogs\blog&gt;pelican-quickstart</div><div class="line">Welcome to pelican-quickstart v3.7.1.</div><div class="line"></div><div class="line">This script will <span class="built_in">help</span> you create a new Pelican-based website.</div><div class="line">Please answer the following questions so this script can generate the files needed by Pelican.</div><div class="line"></div><div class="line">&gt; Where <span class="keyword">do</span> you want to create your new web site? [.]</div><div class="line">&gt; What will be the title of this web site? Joshua<span class="string">'s Blog</span></div><div class="line">&gt; Who will be the author of this web site? Joshua Zou</div><div class="line">&gt; What will be the default language of this web site? [Chinese (Simplified)]</div><div class="line">&gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n</div><div class="line">&gt; Do you want to enable article pagination? (Y/n)</div><div class="line">&gt; How many articles per page do you want? [10]</div><div class="line">&gt; What is your time zone? [Europe/Paris] Asia/Shanghai</div><div class="line">&gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) </div><div class="line">&gt; Do you want an auto-reload &amp; simpleHTTP script to assist with theme and site development? (Y/n)</div><div class="line">&gt; Do you want to upload your website using FTP? (y/N)</div><div class="line">&gt; Do you want to upload your website using SSH? (y/N)</div><div class="line">&gt; Do you want to upload your website using Dropbox? (y/N)</div><div class="line">&gt; Do you want to upload your website using S3? (y/N)</div><div class="line">&gt; Do you want to upload your website using Rackspace Cloud Files? (y/N)</div><div class="line">&gt; Do you want to upload your website using GitHub Pages? (y/N)</div><div class="line">Done. Your new project is available at D:\Python\envs\blogs\blog</div></pre></td></tr></table></figure>
<p>完成后会在相应的目录里生成如下基础框架结构及文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">blog/</div><div class="line">├── content            <span class="comment"># 存储Blog文件的目录，这个目录及子目录下的所有md和rst文件都会被转成html</span></div><div class="line">│   └── (pages)        <span class="comment"># Blog文件，如*.md、*.ipynb等文件</span></div><div class="line">├── output             <span class="comment"># 将blog文件转化成相应的html及相应文件的存放目录</span></div><div class="line">├── develop_server.sh  <span class="comment"># pelican简易web服务器操作文件</span></div><div class="line">├── Makefile           <span class="comment"># 方便管理博客的Make命令文件</span></div><div class="line">├── fabfile.py         <span class="comment"># 与make类似，可用fab publish，fab server命令</span></div><div class="line">├── pelicanconf.py     <span class="comment"># 本地开发时的配置文件</span></div><div class="line">└── publishconf.py     <span class="comment"># 发布时的配置文件，可删除</span></div></pre></td></tr></table></figure>
<p>后续配置完整后，框架如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">blog/</div><div class="line">|--content 					<span class="comment"># 存储Blog文件的目录，这个目录及子目录下的所有md和rst文件都会被转成html</span></div><div class="line">|  └──(pages)				<span class="comment"># Blog文件，如*.md、*.ipynb等文件</span></div><div class="line">|--output 					<span class="comment"># 将blog文件转化成相应的html及相应文件的存放目录</span></div><div class="line">   └──.git					<span class="comment"># 执行git init之后，产生的远程仓库目录</span></div><div class="line">|  └──author				<span class="comment"># 作者目录，存放pelicanconf.py中指定的Author文件</span></div><div class="line">|  └──category				<span class="comment"># 分类目录，默认目录文件为misc，在编辑器中指定</span></div><div class="line">|  └──feeds					<span class="comment"># 目录，pelicanconf.py中FEED_RSS指定的XML文件</span></div><div class="line">|  └──articles				<span class="comment"># 目录，pelicanconf.py中ARTICLE_URL指定格式分类文件</span></div><div class="line">|  └──tag					<span class="comment"># 目录，存放编辑器开头所指定的Tag</span></div><div class="line">|  └──theme					<span class="comment"># 目录，存放博客模板文件</span></div><div class="line">|  └──archives.html,authors.html,categories.html,index.html, tags.html</div><div class="line">|——pelican-plugins			<span class="comment"># 目录，pelican插件</span></div><div class="line">|——pelican-themes			<span class="comment"># 目录，pelican主题</span></div><div class="line">|——develop_server.sh		<span class="comment"># pelican简易web服务器操作文件</span></div><div class="line">|——Makefile					<span class="comment"># make 命令文件</span></div><div class="line">|——fabfile.py				<span class="comment"># 与make类似，可用fab publish, fab server命令</span></div><div class="line">|——pelicanconf.py			<span class="comment"># 本地开发时的配置文件</span></div><div class="line">|——publishconf.py			<span class="comment"># 发布时的配置文件，可删除</span></div><div class="line">|——.gitignore				<span class="comment"># 上传Git时排除指定类型文件</span></div></pre></td></tr></table></figure>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/getpelican/pelican-themes.git <span class="comment"># 获取全部主题</span></div><div class="line"><span class="built_in">cd</span> pelican-themes</div><div class="line">pelican-themes -i BT3-Flat  <span class="comment">#可换成你自己的theme</span></div></pre></td></tr></table></figure>
<p>因为个人喜好不同，我选择了 BT3-Flat 这个主题，但是由于原主题部分文件的问题，我自己修改了模板同时在<code>pelicanconf.py</code>文件中修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">THEME = <span class="string">'./pelican-themes/BT3-Flat'</span>      <span class="comment"># 设置的主题所在根目录下的路径</span></div></pre></td></tr></table></figure>
<h2 id="Plugin设置"><a href="#Plugin设置" class="headerlink" title="Plugin设置"></a>Plugin设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/getpelican/pelican-plugins.git    <span class="comment"># 将所支持的插件clone到本地,方便使用</span></div></pre></td></tr></table></figure>
<h3 id="Jupyter插件"><a href="#Jupyter插件" class="headerlink" title="Jupyter插件"></a>Jupyter插件</h3><p>Pelican默认情况下并不支持使用jupyter写博客 – 我们需要安装插件来进行支持。我们将把插件以git submodule的方式进行安装以便于管理。</p>
<ul>
<li><p>执行<code>git init</code>将当前文件夹初始化为一个git仓库。</p>
</li>
<li><p>创建<code>plugins</code>文件夹</p>
</li>
<li>在plugins文件夹中执行<code>git submodule add https://github.com/danielfrg/pelican-ipynb.git plugins/ipynb</code>来添加插件</li>
</ul>
<p>为了启动插件，我们需要修改<code>pelicanconf.py</code>并将以下内容添加到尾部：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MARKUP = (<span class="string">'md'</span>, <span class="string">'ipynb'</span>)</div><div class="line">PLUGIN_PATHS = [ <span class="string">'./plugins'</span> ]  <span class="comment"># 如果像原文直接PLUGIN_PATH = `./plugins`而不使用列表会报warning</span></div><div class="line">PLUGINS = [<span class="string">'ipynb.markup'</span>]</div></pre></td></tr></table></figure>
<p>后期在本地测试时发现，加上Jupyter后，部分功能未显示，所以暂时没把Jupyter功能放入进去，所以目前文档只支持Markdown。</p>
<h3 id="JIATHIS社会化分享功能"><a href="#JIATHIS社会化分享功能" class="headerlink" title="JIATHIS社会化分享功能"></a>JIATHIS社会化分享功能</h3><p>在<code>pelicanconf.py</code>文件中配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JIATHIS = True</div></pre></td></tr></table></figure>
<h3 id="Blog-Search"><a href="#Blog-Search" class="headerlink" title="Blog Search"></a>Blog Search</h3><p>在 <a href="https://swiftype.com/users/sign_up" target="_blank" rel="external">Swiftype</a>注册账号，得到输入自己的blog网址得到 API ，然后在 <code>pelicanconf.py</code> 中添加</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SWIFTYPE = <span class="string">'swiftype_api'</span></div></pre></td></tr></table></figure>
<h3 id="Disqus第三方评论"><a href="#Disqus第三方评论" class="headerlink" title="Disqus第三方评论"></a>Disqus第三方评论</h3><p>开启个人博客的原因在于分享知识，分享就需要交流，评论模块当然少不了。第三方评论系统有很多，这里选用很流行的Disqus作为第三方评论系统，在Disqus上申请帐号，按照流程Disqus会分配给你站点的Shortname，记牢Shortname，如果忘了请进入admin/settings中查看。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Site name: &#123;your git account name&#125;.github.io</div><div class="line">Admin URL: &#123;Shortname&#125;.disqus.com</div></pre></td></tr></table></figure>
<p>然后同理，在<code>pelicanconf.py</code>添加：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DISQUS_SITENAME = Shortname</div></pre></td></tr></table></figure>
<p>由于DISQUS是国外的第三方应用，所以如果在国内想看到得FQ，后期争取支持国内友言之类的应用。</p>
<h2 id="BlogRoll和Social设置"><a href="#BlogRoll和Social设置" class="headerlink" title="BlogRoll和Social设置"></a>BlogRoll和Social设置</h2><p>设置一些Blog链接，通过设置LINKS实现,可链接到别人的blog，或者自己的社交圈。在<code>pelicanconf.py</code>文件中配置：</p>
<h3 id="Blogroll"><a href="#Blogroll" class="headerlink" title="Blogroll"></a>Blogroll</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LINKS = ((<span class="string">'Python.org'</span>, <span class="string">'http://python.org/'</span>),</div><div class="line">     (<span class="string">'Jinja2'</span>, <span class="string">'http://jinja.pocoo.org/'</span>),)</div></pre></td></tr></table></figure>
<h3 id="Social-widget"><a href="#Social-widget" class="headerlink" title="Social widget"></a>Social widget</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SOCIAL = ((<span class="string">'weibo'</span>,<span class="string">'http://www.weibo.com/233499456'</span>),</div><div class="line">	  (<span class="string">'envelope'</span>,<span class="string">'mailto:joshua_zou@163.com'</span>),</div><div class="line">      (<span class="string">'twitter'</span>, <span class="string">'https://twitter.com/joshua_zou'</span>),</div><div class="line">      (<span class="string">'facebook'</span>,<span class="string">'https://www.facebook.com/joshua.zou.127'</span>),</div><div class="line">      (<span class="string">'linkedin'</span>, <span class="string">'https://www.linkedin.com/in/%E5%B8%85-%E9%82%B9-736390135/'</span>),</div><div class="line">      (<span class="string">'github'</span>,<span class="string">'https://github.com/ZouJoshua'</span>))</div></pre></td></tr></table></figure>
<h3 id="Feed设置"><a href="#Feed设置" class="headerlink" title="Feed设置"></a>Feed设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FEED_RSS = <span class="string">"feeds/all.rss.xml"</span> </div><div class="line">CATEGORY_FEED_RSS=<span class="string">"feeds/%s.rss.xml"</span>    <span class="comment">#为分类添加Feed</span></div></pre></td></tr></table></figure>
<h2 id="撰写并发布第一篇blog"><a href="#撰写并发布第一篇blog" class="headerlink" title="撰写并发布第一篇blog"></a>撰写并发布第一篇blog</h2><p>插件配置等都完成后，就可以开始书写第一篇Blog了。</p>
<ul>
<li>创建一个Markdown文件，书写自己想记录的blog内容。</li>
<li>在Markdown文件开头加入文档的头信息。</li>
<li>把书写完成的Markdown文件复制到<code>content</code>目录下。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Title: Pelican搭建博客        <span class="comment"># blog的标题</span></div><div class="line">Author: Joshua				 <span class="comment"># blog作者名字</span></div><div class="line">Date: 2017/7/7 14:02:40 	 <span class="comment"># blog发布日期</span></div><div class="line">Category: Pelican			 <span class="comment"># blog分类</span></div><div class="line">Tags: pelican，python，blogs <span class="comment"># blog的标签</span></div><div class="line">Slug: pelican-blog			 <span class="comment"># blog在服务器上的路径，是文档的唯一标识，生成html时直接用这个值做html的文件名，个人采用的是当前的时间戳 </span></div><div class="line">Summary: My first post,<span class="built_in">read</span> it to find out.  <span class="comment"># blog的摘要</span></div></pre></td></tr></table></figure>
<h3 id="将完成的-Markdown-生成-HTML"><a href="#将完成的-Markdown-生成-HTML" class="headerlink" title="将完成的 Markdown 生成 HTML"></a>将完成的 Markdown 生成 HTML</h3><p>在blog目录下运行命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pelican content				<span class="comment"># 将content目录下的markdown文件生成html文件，输出到output文件里</span></div><div class="line"><span class="built_in">cd</span> output</div><div class="line">python -m http.server		<span class="comment"># 启动本地服务器预览blog</span></div></pre></td></tr></table></figure>
<p>在浏览器里访问 <code>localhost:8000</code> 来预览你的博客。</p>
<h3 id="发布博客站点的三种方法"><a href="#发布博客站点的三种方法" class="headerlink" title="发布博客站点的三种方法"></a>发布博客站点的三种方法</h3><p><strong>Pelican命令</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pelican content -s publishconf.py</div></pre></td></tr></table></figure>
<p><strong>Fabric</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pip install fabric</div><div class="line">fab build</div><div class="line">fab regenerate</div><div class="line">fab serve</div><div class="line">fab publish</div></pre></td></tr></table></figure>
<p><strong>Make</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">make html</div><div class="line">make regenerate</div><div class="line">make serve</div><div class="line">make devserver</div><div class="line">./develop_server.sh stop</div></pre></td></tr></table></figure>
<p>make 命令不是 Windows 系统自带的dos命令，需要安装，<a href="http://www.equation.com/servlet/equation.cmd?fa=make" target="_blank" rel="external">点此下载</a>，根据自己电脑选择32位或64位。安装完成后，须将安装路径添加到系统环境变量。</p>
<p>个人常选用 pelican 命令及 make 命令组合将新生成的 html 文件发布到 Github Pages 。</p>
<h3 id="GitHub-Pages的创建和-Git-本地仓库配置"><a href="#GitHub-Pages的创建和-Git-本地仓库配置" class="headerlink" title="GitHub Pages的创建和 Git 本地仓库配置"></a>GitHub Pages的创建和 Git 本地仓库配置</h3><p>要将 blog 部署到 Github 上，必须在本地建立一个 Git 仓库，同时必须确保在 Github server 端有远程仓库，名字一般为 <code>username.github.io</code> 。</p>
<p>GitHub Pages 是 GitHub 的一项功能，允许你快速部署静态网站，让所有人都可以通过特定 URL 访问。为了完成它的配置，我们需要：</p>
<ul>
<li>注册一个 GitHub 帐号，如果你还没有的话。</li>
<li>创建一个叫 username.github.io 的仓库，这里 username 是你的 GitHub 用户名。<a href="https://help.github.com/articles/create-a-repo/" target="_blank" rel="external">这里</a>有更详细的说明。</li>
</ul>
<p>本部分 Git 本地仓库的配置，<a href="https://zoujoshua.github.io/articles/1500367116/" target="_blank" rel="external">可参考此博文</a>。</p>
<p>创建一个叫做 <code>.gitignore</code> 的文件，并添加入这个<a href="https://github.com/github/gitignore/blob/master/Python.gitignore" target="_blank" rel="external">文件</a>的内容。最终我们将会把文件提交到 Git ，<code>.gitignore</code>将会排除指定类型的文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> output</div><div class="line">git init         <span class="comment"># 产生一个.git文件夹</span></div><div class="line">git remote add origin https://github.com/****/****.github.io.git    <span class="comment">#将远程仓库配置到本地</span></div><div class="line">git add .</div><div class="line">git commit -m <span class="string">"commit blog"</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>对于后期的更新，如果需要修改远程仓库，可以选用下面命令之一，先将远程仓库配置到本地，然后进入本地远程仓库目录进行修改，最终提交。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/****/****.github.io.git        <span class="comment">#将远程仓库克隆到本地</span></div><div class="line"><span class="built_in">cd</span> xxx(<span class="built_in">clone</span>到本地的仓库路径）</div><div class="line">git rm -rf xxx 						<span class="comment"># 删除文件夹</span></div><div class="line">git commit -m <span class="string">"Delete some files."</span>  <span class="comment"># 提交修改</span></div><div class="line">git push origin xxx					<span class="comment"># 将修改提交到远程仓库的分支或主支</span></div></pre></td></tr></table></figure>
<h3 id="设置一键上传部署到-Github"><a href="#设置一键上传部署到-Github" class="headerlink" title="设置一键上传部署到 Github"></a>设置一键上传部署到 Github</h3><p>打开根目录下的Makefile文件，修改以下三个地方：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OUTPUTDIR=$(BASEDIR)/output/    <span class="comment">#本地博客仓库路径</span></div><div class="line">publish:    </div><div class="line">$(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(CONFFILE) $(PELICANOPTS)    <span class="comment">#可修改OUTPUTDIR,发布的blog站点的输出路径</span></div><div class="line">github: publish    </div><div class="line"><span class="built_in">cd</span> OUTPUTDIR ; git add . ;  git commit -am <span class="string">'your comments'</span> ; git push</div></pre></td></tr></table></figure>
<p>设置完后，以后写完文章就可以通过在blog根目录下执行<code>make github</code>进行一键部署了。</p>
<p>可在Makefile文件中增加如下命令，有新文章要发布时可用 <code>make upload</code>一键更新到 Github 上。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">upload:</div><div class="line">	<span class="built_in">cd</span> $(OUTPUTDIR) &amp;&amp; git add -A &amp;&amp; git commit -am <span class="string">"update blog"</span> &amp;&amp; git push origin master</div></pre></td></tr></table></figure>
<p>其实，命令文章的更新上传本质还是用 Git 命令的，只不过 make 命令可以将 Git 命令整合后一键操作，自然比一个一个命令去上传更新来的快。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在博客搭建的过程中，趟过的一些坑。</p>
<ol>
<li>因本人关注数据挖掘、数据分析、算法方面的内容，所以希望用Jupyter Notebook 及 Markdown 搭建一个数据科学博客，但是所选用的这个主题对Jupyter Notebook的插件支持并不好，同时用两种文件方式的时候，整个主题的部分功能显示不全，但不影响总体使用，对这个小瑕疵并不感冒的可以将 Jupyter 插件加入，但是本人有些轻度完美主义，所以暂时先选择Markdown来写。</li>
<li>对于BT3-Flat原主题模板文件，出现部分错误，在此基础上进行改进，同时在主题模板文件中加入JIATHIS社会化分享功能所必须的 <code>css</code> 文件和 <code>js</code> 文件，使得主题支持社会化分享功能。</li>
<li>对于DISQUS第三方评论插件的显示问题。由于DISQUS是国外的，在国内浏览的话会被Q的，如果可以FQ，是可以使用的。</li>
<li>由于个人不太懂css响应式布局，所以在手机端显示会有一些问题，稍后研究完再进行修改。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在今年的个人计划中，想要搭建一个数据挖掘的平台，主要目的是，希望通过这件事能让自己对数据挖掘、机器学习的各种算法都很熟练，同时对搭建这样的平台框架有个基础的实践与认知。因此，就想在做这件事的时候能将自己趟过的坑记录整理下来，帮助自己从技术上提高。所以，首先得搭建一个自己的博客。虽然，目前网上有很多现成的博客系统，但是自己总觉得自定义的才是最炫酷的（其实并没有什么卵用），希望能一直坚持下来吧。本文采用 Python 的 Pelican 库搭建数据科学博客，并将 blog 挂在 Github Pages 上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Pelican" scheme="http://joshuazou.cn/categories/Pelican/"/>
    
    
      <category term="blog" scheme="http://joshuazou.cn/tags/blog/"/>
    
      <category term="git" scheme="http://joshuazou.cn/tags/git/"/>
    
      <category term="pelican" scheme="http://joshuazou.cn/tags/pelican/"/>
    
      <category term="python" scheme="http://joshuazou.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://joshuazou.cn/2017/01/11/Test/"/>
    <id>http://joshuazou.cn/2017/01/11/Test/</id>
    <published>2017-01-11T06:26:33.000Z</published>
    <updated>2017-07-28T02:56:32.236Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="Hexo-blog" scheme="http://joshuazou.cn/categories/Hexo-blog/"/>
    
    
      <category term="test" scheme="http://joshuazou.cn/tags/test/"/>
    
      <category term="hexo" scheme="http://joshuazou.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
